[{"description":"Bolt's definition of border-radius scale. Used within 'export-data()' to JSON.\n","commentRange":{"start":12,"end":13},"context":{"type":"variable","name":"bolt-border-radius-values","value":"(\n  small: 3px,\n  large: 0.75em,\n  full: 100em\n)","scope":"default","line":{"start":14,"end":18}},"type":"Map","group":["settings: border"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-border-radius/_settings-border-radius.scss","name":"_settings-border-radius.scss"},"usedBy":[{"description":"Bolt border radius function\n","context":{"type":"function","name":"bolt-border-radius","code":"\n  @if map-has-key($bolt-border-radius-values, $value) {\n    @return map-get($bolt-border-radius-values, $value)\n  } @else {\n    @error 'A value, #{$value}, was passed into bolt-border-radius() that is not defined in $bolt-border-radius-values';\n  }\n","line":{"start":16,"end":22}}},{"description":"Bolt border radius function\n","context":{"type":"function","name":"bolt-border-radius","code":"\n  @if map-has-key($bolt-border-radius-values, $value) {\n    @return map-get($bolt-border-radius-values, $value)\n  } @else {\n    @error 'A value, #{$value}, was passed into bolt-border-radius() that is not defined in $bolt-border-radius-values';\n  }\n","line":{"start":16,"end":22}}},{"description":"Bolt border radius function\n","context":{"type":"function","name":"bolt-border-radius","code":"\n  @if map-has-key($bolt-border-radius-values, $value) {\n    @return map-get($bolt-border-radius-values, $value)\n  } @else {\n    @error 'A value, #{$value}, was passed into bolt-border-radius() that is not defined in $bolt-border-radius-values';\n  }\n","line":{"start":16,"end":22}}},{"description":"Bolt border radius mixin\n","context":{"type":"mixin","name":"bolt-border-radius","code":"\n  $border-radius: map-get-deep($bolt-border-radius-values, $value);\n\n  @if map-has-key($bolt-border-radius-values, $value) {\n    border-radius: $border-radius;\n  } @else {\n    @error 'A value, #{$value}, was passed into @include bolt-border-radius() that is not defined in $bolt-border-radius-values';\n  }\n","line":{"start":30,"end":38}}},{"description":"Bolt border radius mixin\n","context":{"type":"mixin","name":"bolt-border-radius","code":"\n  $border-radius: map-get-deep($bolt-border-radius-values, $value);\n\n  @if map-has-key($bolt-border-radius-values, $value) {\n    border-radius: $border-radius;\n  } @else {\n    @error 'A value, #{$value}, was passed into @include bolt-border-radius() that is not defined in $bolt-border-radius-values';\n  }\n","line":{"start":30,"end":38}}},{"description":"Bolt border radius mixin\n","context":{"type":"mixin","name":"bolt-border-radius","code":"\n  $border-radius: map-get-deep($bolt-border-radius-values, $value);\n\n  @if map-has-key($bolt-border-radius-values, $value) {\n    border-radius: $border-radius;\n  } @else {\n    @error 'A value, #{$value}, was passed into @include bolt-border-radius() that is not defined in $bolt-border-radius-values';\n  }\n","line":{"start":30,"end":38}}}]},{"description":"Major breakpoints used globally in Bolt.\n","commentRange":{"start":6,"end":8},"context":{"type":"variable","name":"bolt-breakpoints","value":"(\n  xxsmall:  320px,\n  xsmall:   400px,\n  small:    600px,\n  medium:   800px,\n  large:    1000px,\n  xlarge:   1200px,\n  xxlarge:  1400px,\n  xxxlarge: 1920px\n)","scope":"default","line":{"start":9,"end":18}},"type":"Map","see":[{"description":"This returns the breakpoint value (with px) from $bolt-breakpoints map\n","context":{"type":"function","name":"bolt-breakpoint","code":"\n  @return map-get($bolt-breakpoints, $name);\n","line":{"start":20,"end":22}}}],"group":["settings: breakpoints"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"01-settings/settings-breakpoints/_settings-breakpoints.scss","name":"_settings-breakpoints.scss"},"usedBy":[{"description":"This returns the breakpoint value (with px) from $bolt-breakpoints map\n","context":{"type":"function","name":"bolt-breakpoint","code":"\n  @return map-get($bolt-breakpoints, $name);\n","line":{"start":20,"end":22}}}]},{"description":"A duplicate of $bolt-breakpoints - used within mq()\n","commentRange":{"start":20,"end":21},"context":{"type":"variable","name":"mq-breakpoints","value":"$bolt-breakpoints","scope":"private","line":{"start":22,"end":22}},"see":[{"description":"This provides a wrapper mixin for performing bolt media queries with mq() which allows for the use of:\n$from (inclusive min-width boundary), $until (exclusive max-width boundary), $and (additional custom directives), $media-type (media type: screen, print, etc)\n","context":{"type":"mixin","name":"bolt-mq","code":"\n  @include mq($args...) {\n    @content;\n  }\n","line":{"start":39,"end":43}}}],"group":["settings: breakpoints"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"01-settings/settings-breakpoints/_settings-breakpoints.scss","name":"_settings-breakpoints.scss"}},{"description":"Bolt default color var.\n","commentRange":{"start":10,"end":10},"context":{"type":"variable","name":"bolt-color-default","value":"'base'","scope":"private","line":{"start":11,"end":11}},"group":["settings: colors"],"access":"public","file":{"path":"01-settings/settings-colors/_settings-colors.scss","name":"_settings-colors.scss"}},{"description":"Bolt Brand Colors - merged into $bolt-colors map\n","commentRange":{"start":13,"end":14},"context":{"type":"variable","name":"bolt-brand-colors","value":"(\n  'indigo': (\n    'xdark': hsl(233, 71%, 8%),\n    'dark': hsl(233, 47%, 16%),\n    'base': hsl(233, 47%, 23%),\n    'light': hsl(233, 33%, 49%),\n    'xlight': hsl(233, 73%, 81%),\n  ),\n  'yellow': (\n    'xdark': hsl(43, 100%, 20%),\n    'dark': hsl(43, 82%, 50%),\n    'base': hsl(43, 100%, 65%),\n    'light': hsl(43, 100%, 80%),\n    'xlight': hsl(43, 100%, 90%),\n  ),\n  'teal': (\n    'xdark': hsl(180, 100%, 10%),\n    'dark': hsl(180, 82%, 22%),\n    'base': hsl(180, 100%, 30%),\n    'light': hsl(180, 45%, 64%),\n    'xlight': hsl(180, 48%, 81%),\n  ),\n  'orange': (\n    'xdark': hsl(15, 100%, 20%),\n    'dark': hsl(15, 82%, 39%),\n    'base': hsl(15, 82%, 50%),\n    'light': hsl(15, 100%, 70%),\n    'xlight': hsl(15, 100%, 85%),\n  ),\n  'gray': (\n    'xdark': hsl(233, 6%, 19%),\n    'dark': hsl(233, 5.3%, 38%),\n    'base': hsl(233, 5.7%, 57.6%),\n    'light': hsl(233, 20%, 90%),\n    'xlight': hsl(233, 23%, 97%),\n  ),\n  'black': (\n    'base': hsl(225, 8%, 9%),\n  ),\n  'white': (\n    'base': hsl(0, 0%, 100%),\n  ),\n)","scope":"default","line":{"start":15,"end":57}},"type":"map","group":["settings: colors"],"access":"public","file":{"path":"01-settings/settings-colors/_settings-colors.scss","name":"_settings-colors.scss"}},{"description":"Bolt Status Colors - merged into $bolt-colors map\n","commentRange":{"start":59,"end":60},"context":{"type":"variable","name":"bolt-status-colors","value":"(\n  'blue': (\n    'dark': hsl(201, 100%, 25%),\n    'base': hsl(201, 100%, 35%),\n    'light': hsl(201, 100%, 92%),\n  ),\n  'success': (\n    'dark': rgb(37, 41%, 25%),\n    'base': hsl(123, 41%, 35%),\n    'light': hsl(123, 41%, 90%),\n  ),\n  'error': (\n    'dark': hsl(6, 76%, 35%),\n    'base': hsl(6, 76%, 40%),\n    'light': hsl(6, 80%, 90%),\n  ),\n  'warning': (\n    'dark': hsl(51, 80%, 45%),\n    'base': hsl(51, 80%, 55%),\n    'light': hsl(51, 80%, 90%),\n  ),\n)","scope":"default","line":{"start":61,"end":82}},"type":"map","group":["settings: colors"],"access":"public","file":{"path":"01-settings/settings-colors/_settings-colors.scss","name":"_settings-colors.scss"}},{"description":"Bolt Social Colors - merged into $bolt-colors map\n","commentRange":{"start":84,"end":85},"context":{"type":"variable","name":"bolt-social-colors","value":"(\n  'social': (\n    'facebook': hsl(222, 46%, 42%),\n    'twitter': hsl(196, 100%, 46%),\n    'linkedin': hsl(201, 96%, 36%),\n  ),\n)","scope":"default","line":{"start":86,"end":92}},"type":"map","group":["settings: colors"],"access":"public","file":{"path":"01-settings/settings-colors/_settings-colors.scss","name":"_settings-colors.scss"}},{"description":"All Bolt Colors - used within bolt-color @mixin and @function\n","commentRange":{"start":94,"end":97},"context":{"type":"variable","name":"bolt-colors","value":"map-merge(\n  map-merge($bolt-brand-colors, $bolt-status-colors),\n  $bolt-social-colors\n)","scope":"default","line":{"start":98,"end":101}},"type":"map","see":[{"description":"Helper functions for applying global color swatches stored in Sass Maps\n","context":{"type":"function","name":"bolt-color","code":"\n  @return map-get-deep($bolt-colors, quote($color), $tone);\n","line":{"start":13,"end":15}}},{"description":"Helper functions for applying global color swatches stored in Sass Maps\n","context":{"type":"function","name":"bolt-color","code":"\n  @return map-get-deep($bolt-colors, quote($color), $tone);\n","line":{"start":13,"end":15}}}],"group":["settings: colors"],"access":"public","file":{"path":"01-settings/settings-colors/_settings-colors.scss","name":"_settings-colors.scss"},"usedBy":[{"description":"Helper functions for applying global color swatches stored in Sass Maps\n","context":{"type":"function","name":"bolt-color","code":"\n  @return map-get-deep($bolt-colors, quote($color), $tone);\n","line":{"start":13,"end":15}}},{"description":"Mixin to return color value\n","context":{"type":"mixin","name":"bolt-color","code":"\n  @if $important == important {\n    $important: !important;\n  }\n\n  /* stylelint-disable-next-line */\n  color: map-get-deep($bolt-colors, $color, $tone) $important;\n","line":{"start":25,"end":32}}}]},{"description":"Global Default Min Base Font Size\n","commentRange":{"start":17,"end":17},"context":{"type":"variable","name":"bolt-base-font-size--min","value":"15px","scope":"default","line":{"start":18,"end":18}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Global Default Max Base Font Size\n","commentRange":{"start":19,"end":19},"context":{"type":"variable","name":"bolt-base-font-size--max","value":"18px","scope":"default","line":{"start":20,"end":20}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Async Default font subset loaded class.\n","commentRange":{"start":23,"end":23},"context":{"type":"variable","name":"bolt-fonts--subset-loaded-class","value":"'js-fonts-subset-loaded'","scope":"default","line":{"start":24,"end":24}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Async Default font loaded class.\n","commentRange":{"start":25,"end":25},"context":{"type":"variable","name":"bolt-fonts--loaded-class","value":"'js-fonts-loaded'","scope":"default","line":{"start":26,"end":26}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt shadow color\n","commentRange":{"start":30,"end":30},"context":{"type":"variable","name":"bolt-shadow-color","value":"bolt-color(black)","scope":"default","line":{"start":31,"end":31}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt small shadow\n","commentRange":{"start":32,"end":32},"context":{"type":"variable","name":"bolt-shadow--small","value":"0 2px 0.15rem rgba($bolt-shadow-color, 0.3)","scope":"default","line":{"start":33,"end":33}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt medium shadow\n","commentRange":{"start":34,"end":34},"context":{"type":"variable","name":"bolt-shadow--medium","value":"0 0.15rem 0.3rem rgba($bolt-shadow-color, 0.35)","scope":"default","line":{"start":35,"end":35}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt large shadow\n","commentRange":{"start":36,"end":36},"context":{"type":"variable","name":"bolt-shadow--large","value":"0 0.35rem 0.6rem rgba($bolt-shadow-color, 0.18)","scope":"default","line":{"start":37,"end":37}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt border width\n","commentRange":{"start":40,"end":40},"context":{"type":"variable","name":"bolt-border-width","value":"1px","scope":"default","line":{"start":41,"end":41}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt border style\n","commentRange":{"start":42,"end":42},"context":{"type":"variable","name":"bolt-border-style","value":"solid","scope":"default","line":{"start":43,"end":43}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt border color\n","commentRange":{"start":44,"end":44},"context":{"type":"variable","name":"bolt-border-color","value":"rgba(bolt-color(gray), 0.2)","scope":"default","line":{"start":45,"end":45}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt border radius\n","commentRange":{"start":46,"end":46},"context":{"type":"variable","name":"bolt-border-radius","value":"3px","scope":"default","line":{"start":47,"end":47}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt transition\n","commentRange":{"start":50,"end":50},"context":{"type":"variable","name":"bolt-transition","value":"ease-in-out 200ms","scope":"default","line":{"start":51,"end":51}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt transition ease\n","commentRange":{"start":52,"end":52},"context":{"type":"variable","name":"bolt-transition-ease","value":"ease-in-out","scope":"default","line":{"start":53,"end":53}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt transition timing\n","commentRange":{"start":54,"end":54},"context":{"type":"variable","name":"bolt-transition-timing","value":"200ms","scope":"default","line":{"start":55,"end":55}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt translate none effect\n","commentRange":{"start":58,"end":58},"context":{"type":"variable","name":"bolt-translate-none","value":"translate3d(0, 0, 0)","scope":"default","line":{"start":59,"end":59}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt translate raised small effect\n","commentRange":{"start":60,"end":60},"context":{"type":"variable","name":"bolt-translate-raised--small","value":"translate3d(0, -1px, 0)","scope":"default","line":{"start":61,"end":61}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt translate raised medium effect\n","commentRange":{"start":62,"end":62},"context":{"type":"variable","name":"bolt-translate-raised--medium","value":"translate3d(0, -0.125rem, 0)","scope":"default","line":{"start":63,"end":63}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt translate raised large effect\n","commentRange":{"start":64,"end":64},"context":{"type":"variable","name":"bolt-translate-raised--large","value":"translate3d(0, -0.25rem, 0)","scope":"default","line":{"start":65,"end":65}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt default global link hover opacity\n","commentRange":{"start":69,"end":69},"context":{"type":"variable","name":"bolt-global-link-hover-opacity","value":"bolt-opacity(80)","scope":"default","line":{"start":70,"end":70}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt default global link active opacity\n","commentRange":{"start":71,"end":71},"context":{"type":"variable","name":"bolt-global-link-active-opacity","value":"bolt-opacity(60)","scope":"default","line":{"start":72,"end":72}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt default global border opacity\n","commentRange":{"start":74,"end":74},"context":{"type":"variable","name":"bolt-global-border-opacity","value":"bolt-opacity(20)","scope":"default","line":{"start":75,"end":75}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt default global border color\n","commentRange":{"start":76,"end":76},"context":{"type":"variable","name":"bolt-global-border-color","value":"bolt-color(gray)","scope":"default","line":{"start":77,"end":77}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt default global button hover mix %\n","commentRange":{"start":79,"end":79},"context":{"type":"variable","name":"bolt-global-button-hover-mix","value":"15%","scope":"default","line":{"start":80,"end":80}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt default global button hover color\n","commentRange":{"start":81,"end":81},"context":{"type":"variable","name":"bolt-global-button-hover-color","value":"bolt-color(white)","scope":"default","line":{"start":82,"end":82}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt default global button active mix %\n","commentRange":{"start":83,"end":83},"context":{"type":"variable","name":"bolt-global-button-active-mix","value":"25%","scope":"default","line":{"start":84,"end":84}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt default global button active color\n","commentRange":{"start":85,"end":85},"context":{"type":"variable","name":"bolt-global-button-active-color","value":"bolt-color(black)","scope":"default","line":{"start":86,"end":86}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt's definition of block level elements.\n","commentRange":{"start":93,"end":93},"context":{"type":"variable","name":"bolt-block-elements-list","value":"'p',\n  'pre',\n  'blockquote',\n  'table',\n  'ol',\n  'ul',\n  'dl',\n  'fieldset',\n  'legend',\n  'details',\n  'summary',\n  'hr',\n  'address'","scope":"default","line":{"start":94,"end":106}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt's definition of all unquoted block level elements.\n","commentRange":{"start":114,"end":114},"context":{"type":"variable","name":"bolt-all-block-elements","value":"$bolt-unquoted-block-elements-list","scope":"private","line":{"start":115,"end":115}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt's definition of heading elements.\n","commentRange":{"start":122,"end":122},"context":{"type":"variable","name":"bolt-heading-elements-list","value":"'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6'","scope":"default","line":{"start":123,"end":128}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Bolt's definition of all unquoted heading elements.\n","commentRange":{"start":136,"end":136},"context":{"type":"variable","name":"bolt-all-heading-elements","value":"$bolt-unquoted-heading-elements-list","scope":"private","line":{"start":137,"end":137}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Quoted custom block elements used to globally collect group generic styles. Elements registered via @mixin bolt-register-element.\n","commentRange":{"start":146,"end":147},"context":{"type":"variable","name":"_bolt-custom-block-elements","value":"()","scope":"global","line":{"start":148,"end":148}},"see":[{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}}}],"group":["settings: global"],"author":["Mike Mai"],"access":"private","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"},"usedBy":[{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}}},{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}}}]},{"description":"Quoted custom inline elements used to globally collect group generic styles. Elements registered via @mixin bolt-register-element.\n","commentRange":{"start":149,"end":150},"context":{"type":"variable","name":"_bolt-custom-inline-elements","value":"()","scope":"global","line":{"start":151,"end":151}},"see":[{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}}}],"group":["settings: global"],"author":["Mike Mai"],"access":"private","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"},"usedBy":[{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}}},{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}}}]},{"description":"Quoted custom inline-block elements used to globally collect group generic styles. Elements registered via @mixin bolt-register-element.\n","commentRange":{"start":152,"end":153},"context":{"type":"variable","name":"_bolt-custom-inline-block-elements","value":"()","scope":"global","line":{"start":154,"end":154}},"see":[{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}}}],"group":["settings: global"],"author":["Mike Mai"],"access":"private","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"},"usedBy":[{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}}},{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}}}]},{"description":"All (unquoted) custom block elements used to globally collect group generic styles\n","commentRange":{"start":157,"end":157},"context":{"type":"variable","name":"bolt-all-custom-block-elements","value":"()","scope":"global","line":{"start":158,"end":158}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"All (unquoted) custom inline-block elements used to globally collect group generic styles\n","commentRange":{"start":159,"end":159},"context":{"type":"variable","name":"bolt-all-custom-inline-block-elements","value":"()","scope":"global","line":{"start":160,"end":160}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"All (unquoted) custom inline elements used to globally collect group generic styles\n","commentRange":{"start":161,"end":161},"context":{"type":"variable","name":"bolt-all-custom-inline-elements","value":"()","scope":"global","line":{"start":162,"end":162}},"group":["settings: global"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Register Element helper mixin: registers any custom elements getting included (used outside selector or declaration)\n","commentRange":{"start":165,"end":169},"context":{"type":"mixin","name":"bolt-register-element","code":"\n  @if ($element-type != 'inline' and $element-type != 'inline-block' and $element-type != 'block'){\n    @error 'Please register your #{$element} element as either an inline, inline-block or block.';\n  }\n\n  // @TODO: find a way to dynamically assign the right list to this\n  @if ($element-type == 'inline') {\n    $_bolt-custom-inline-elements: append($_bolt-custom-inline-elements, $element) !global;\n\n  } @else if  ( $element-type == 'block') {\n    $_bolt-custom-block-elements: append($_bolt-custom-block-elements, $element) !global;\n  } @else if  ( $element-type == 'inline-block') {\n    $_bolt-custom-inline-block-elements: append($_bolt-custom-inline-block-elements, $element) !global;\n  }\n","line":{"start":170,"end":184}},"parameter":[{"type":"string","name":"element","description":"The custom element to register"},{"type":"string","name":"element-type","description":"Three different types available: inline, inline-block (which may be rendered as inline-flex), and block"}],"example":[{"type":"scss","code":"@include bolt-register-element('bolt-ordered-list', 'block');","description":"Utility Mixin"}],"group":["settings: global"],"author":["Mike Mai"],"access":"public","require":[{"type":"variable","name":"_bolt-custom-inline-elements"},{"type":"variable","name":"_bolt-custom-inline-elements"},{"type":"variable","name":"_bolt-custom-block-elements"},{"type":"variable","name":"_bolt-custom-block-elements"},{"type":"variable","name":"_bolt-custom-inline-block-elements"},{"type":"variable","name":"_bolt-custom-inline-block-elements"}],"throw":["Please register your #{$element} element as either an inline, inline-block or block."],"file":{"path":"01-settings/settings-global/_settings-global.scss","name":"_settings-global.scss"}},{"description":"Z-Index Settings\n","commentRange":{"start":10,"end":13},"context":{"type":"variable","name":"bolt-z-indexes","value":"(\n  sets: (\n    fab: 300,\n    modal: 200,\n    modalBG: 180,\n    navFixed: 160,\n    tooltip: 140,\n    popover: 120,\n    nav: 100,\n    contentTop: 80,\n    content: 60,\n    contentBottom: 40,\n    backgroundTop: 20,\n    background: 0,\n    backgroundBottom: -20,\n  ),\n)","scope":"default","line":{"start":14,"end":30}},"type":"Map","see":[{"description":"Bolt Z Index mixin\n","context":{"type":"mixin","name":"bolt-z-index","code":"\n  $indexes: map-get($bolt-z-indexes, 'sets');\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if map-has-key($indexes, $key) {\n    z-index: map-get($indexes, $key) #{$important};\n  } @else {\n    @error 'A value, #{$key}, was passed into @include bolt-z-index() that is not defined in $bolt-z-indexes';\n  }\n","line":{"start":16,"end":28}}},{"description":"Bolt Z Index mixin\n","context":{"type":"mixin","name":"bolt-z-index","code":"\n  $indexes: map-get($bolt-z-indexes, 'sets');\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if map-has-key($indexes, $key) {\n    z-index: map-get($indexes, $key) #{$important};\n  } @else {\n    @error 'A value, #{$key}, was passed into @include bolt-z-index() that is not defined in $bolt-z-indexes';\n  }\n","line":{"start":16,"end":28}}}],"group":["settings: layout"],"access":"public","file":{"path":"01-settings/_settings-z-index.scss","name":"_settings-z-index.scss"},"usedBy":[{"description":"Bolt Z Index mixin\n","context":{"type":"mixin","name":"bolt-z-index","code":"\n  $indexes: map-get($bolt-z-indexes, 'sets');\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if map-has-key($indexes, $key) {\n    z-index: map-get($indexes, $key) #{$important};\n  } @else {\n    @error 'A value, #{$key}, was passed into @include bolt-z-index() that is not defined in $bolt-z-indexes';\n  }\n","line":{"start":16,"end":28}}},{"description":"Bolt Z Index mixin\n","context":{"type":"mixin","name":"bolt-z-index","code":"\n  $indexes: map-get($bolt-z-indexes, 'sets');\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if map-has-key($indexes, $key) {\n    z-index: map-get($indexes, $key) #{$important};\n  } @else {\n    @error 'A value, #{$key}, was passed into @include bolt-z-index() that is not defined in $bolt-z-indexes';\n  }\n","line":{"start":16,"end":28}}},{"description":"Bolt Z Index function\n","context":{"type":"function","name":"bolt-z-index","code":"\n  $indexes: map-get($bolt-z-indexes, 'sets');\n  @if map-has-key($indexes, $key) {\n    @return map-get($indexes, $key)\n  } @else {\n    @error 'A value, #{$key}, was passed into bolt-z-index() that is not defined in $bolt-z-indexes';\n  }\n","line":{"start":36,"end":43}}},{"description":"Bolt Z Index function\n","context":{"type":"function","name":"bolt-z-index","code":"\n  $indexes: map-get($bolt-z-indexes, 'sets');\n  @if map-has-key($indexes, $key) {\n    @return map-get($indexes, $key)\n  } @else {\n    @error 'A value, #{$key}, was passed into bolt-z-index() that is not defined in $bolt-z-indexes';\n  }\n","line":{"start":36,"end":43}}}]},{"description":"Bolt gutter spacing value\n","commentRange":{"start":11,"end":11},"context":{"type":"variable","name":"bolt-spacing-gutter","value":"2rem","scope":"default","line":{"start":12,"end":12}},"group":["settings: layout"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-spacing/_settings-spacing.scss","name":"_settings-spacing.scss"},"usedBy":[{"description":"Private bolt function to generate default spacing scale, based off of the base font size\n","context":{"type":"function","name":"_bolt-create-spacing-map","code":"\n  $map: ();\n  @each $name, $value in $sizes {\n    $keyName: $name;\n    @if ($char != '' and $keyName != null) {\n      $keyName: $char + $keyName;\n    }\n    $keyValue: $value * $bolt-spacing-gutter;\n    $map: map-merge($map, ($keyName: $keyValue));\n  }\n  @return $map;\n","line":{"start":15,"end":26}}},{"description":"Convert shirt sizes in baseline-optimized sizes\n","context":{"type":"function","name":"bolt-v-spacing","code":"\n  @if ($modifier == 'squished') {\n    $modifier: $bolt-spacing-squished;\n  } @elseif ($modifier == 'stretched') {\n    $modifier: $bolt-spacing-stretched;\n  } @else {\n    $modifier: 1;\n  }\n\n  @return (bolt-spacing($size) / bolt-strip-unit($bolt-spacing-gutter)) * $bolt-spacing-leading * $modifier;\n","line":{"start":58,"end":68}}}]},{"description":"Bolt default leading spacing value\n","commentRange":{"start":13,"end":13},"context":{"type":"variable","name":"bolt-spacing-leading","value":"1.65","scope":"default","line":{"start":14,"end":14}},"group":["settings: layout"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-spacing/_settings-spacing.scss","name":"_settings-spacing.scss"},"usedBy":[{"description":"Convert shirt sizes in baseline-optimized sizes\n","context":{"type":"function","name":"bolt-v-spacing","code":"\n  @if ($modifier == 'squished') {\n    $modifier: $bolt-spacing-squished;\n  } @elseif ($modifier == 'stretched') {\n    $modifier: $bolt-spacing-stretched;\n  } @else {\n    $modifier: 1;\n  }\n\n  @return (bolt-spacing($size) / bolt-strip-unit($bolt-spacing-gutter)) * $bolt-spacing-leading * $modifier;\n","line":{"start":58,"end":68}}}]},{"description":"Bolt squished spacing value\n","commentRange":{"start":15,"end":15},"context":{"type":"variable","name":"bolt-spacing-squished","value":"0.5","scope":"default","line":{"start":16,"end":16}},"group":["settings: layout"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-spacing/_settings-spacing.scss","name":"_settings-spacing.scss"},"usedBy":[{"description":"Convert shirt sizes in baseline-optimized sizes\n","context":{"type":"function","name":"bolt-v-spacing","code":"\n  @if ($modifier == 'squished') {\n    $modifier: $bolt-spacing-squished;\n  } @elseif ($modifier == 'stretched') {\n    $modifier: $bolt-spacing-stretched;\n  } @else {\n    $modifier: 1;\n  }\n\n  @return (bolt-spacing($size) / bolt-strip-unit($bolt-spacing-gutter)) * $bolt-spacing-leading * $modifier;\n","line":{"start":58,"end":68}}}]},{"description":"Bolt stretched spacing value\n","commentRange":{"start":17,"end":17},"context":{"type":"variable","name":"bolt-spacing-stretched","value":"1.5","scope":"default","line":{"start":18,"end":18}},"group":["settings: layout"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-spacing/_settings-spacing.scss","name":"_settings-spacing.scss"},"usedBy":[{"description":"Convert shirt sizes in baseline-optimized sizes\n","context":{"type":"function","name":"bolt-v-spacing","code":"\n  @if ($modifier == 'squished') {\n    $modifier: $bolt-spacing-squished;\n  } @elseif ($modifier == 'stretched') {\n    $modifier: $bolt-spacing-stretched;\n  } @else {\n    $modifier: 1;\n  }\n\n  @return (bolt-spacing($size) / bolt-strip-unit($bolt-spacing-gutter)) * $bolt-spacing-leading * $modifier;\n","line":{"start":58,"end":68}}}]},{"description":"Bolt's definition of spacing scale. Used within 'export-data()' to JSON.\n","commentRange":{"start":20,"end":21},"context":{"type":"variable","name":"bolt-spacing-values","value":"(\n  '': 1,\n  'xxsmall': 0.125,\n  'xsmall': 0.25,\n  'small': 0.5,\n  'medium': 1,\n  'large': 2,\n  'xlarge': 4,\n  'xxlarge': 8,\n)","scope":"default","line":{"start":22,"end":31}},"type":"Map","group":["settings: layout"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-spacing/_settings-spacing.scss","name":"_settings-spacing.scss"}},{"description":"Bolt's definition of available spacing properties.\n","commentRange":{"start":35,"end":36},"context":{"type":"variable","name":"bolt-spacing-properties","value":"('padding', 'margin')","scope":"default","line":{"start":37,"end":37}},"type":"Map","group":["settings: layout"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-spacing/_settings-spacing.scss","name":"_settings-spacing.scss"}},{"description":"Bolt's definition of spacing directions.\n","commentRange":{"start":39,"end":40},"context":{"type":"variable","name":"bolt-spacing-directions","value":"('', 'top', 'right', 'bottom', 'left')","scope":"default","line":{"start":41,"end":41}},"type":"Map","group":["settings: layout"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-spacing/_settings-spacing.scss","name":"_settings-spacing.scss"}},{"description":"Bolt's definition of spacing types.\n","commentRange":{"start":43,"end":44},"context":{"type":"variable","name":"bolt-spacing-types","value":"('', 'squished', 'stretched')","scope":"default","line":{"start":45,"end":45}},"type":"Map","group":["settings: layout"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-spacing/_settings-spacing.scss","name":"_settings-spacing.scss"}},{"description":"Bolt's opacity scale.\nThe keys in this array are the opacity value names and not necessarily numeric.  For example, a valid key could be\n\"semi-transparent\". However, the values in this array must be valid numeric values for the CSS 'opacity' property.\n","commentRange":{"start":10,"end":13},"context":{"type":"variable","name":"bolt-opacities","value":"(\n  0: 0,\n  20: .2,\n  40: .4,\n  60: .6,\n  80: .8,\n  100: 1\n)","scope":"default","line":{"start":14,"end":21}},"type":"Map","group":["settings: opacity"],"author":["Remy Denton"],"access":"public","file":{"path":"01-settings/settings-opacity/_settings-opacity.scss","name":"_settings-opacity.scss"},"usedBy":[{"description":"Bolt Opacity mixin\n","context":{"type":"mixin","name":"bolt-opacity","code":"\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n\n  @if map-has-key($bolt-opacities, $value) {\n    opacity: map-get($bolt-opacities, $value) #{$important};\n  } @else {\n    @error 'A value, #{$value}, was passed into @include bolt-opacity() that is not defined in $bolt-opacities';\n  }\n","line":{"start":16,"end":28}}},{"description":"Bolt Opacity mixin\n","context":{"type":"mixin","name":"bolt-opacity","code":"\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n\n  @if map-has-key($bolt-opacities, $value) {\n    opacity: map-get($bolt-opacities, $value) #{$important};\n  } @else {\n    @error 'A value, #{$value}, was passed into @include bolt-opacity() that is not defined in $bolt-opacities';\n  }\n","line":{"start":16,"end":28}}},{"description":"Bolt Opacity mixin\n","context":{"type":"mixin","name":"bolt-opacity","code":"\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n\n  @if map-has-key($bolt-opacities, $value) {\n    opacity: map-get($bolt-opacities, $value) #{$important};\n  } @else {\n    @error 'A value, #{$value}, was passed into @include bolt-opacity() that is not defined in $bolt-opacities';\n  }\n","line":{"start":16,"end":28}}},{"description":"Bolt Opacity function\n","context":{"type":"function","name":"bolt-opacity","code":"\n  @if map-has-key($bolt-opacities, $value) {\n    @return map-get($bolt-opacities, $value)\n  } @else {\n    @error 'A value, #{$value}, was passed into bolt-opacity() that is not defined in $bolt-opacities';\n  }\n","line":{"start":36,"end":42}}},{"description":"Bolt Opacity function\n","context":{"type":"function","name":"bolt-opacity","code":"\n  @if map-has-key($bolt-opacities, $value) {\n    @return map-get($bolt-opacities, $value)\n  } @else {\n    @error 'A value, #{$value}, was passed into bolt-opacity() that is not defined in $bolt-opacities';\n  }\n","line":{"start":36,"end":42}}},{"description":"Bolt Opacity function\n","context":{"type":"function","name":"bolt-opacity","code":"\n  @if map-has-key($bolt-opacities, $value) {\n    @return map-get($bolt-opacities, $value)\n  } @else {\n    @error 'A value, #{$value}, was passed into bolt-opacity() that is not defined in $bolt-opacities';\n  }\n","line":{"start":36,"end":42}}}]},{"description":"Helper function to return $bolt-shadows map\n","commentRange":{"start":11,"end":16},"context":{"type":"function","name":"bolt-get-shadows-map","code":"\n  $bolt-shadows: (\n    'sets': (\n      //'b1': (\n      //  'base': 'inset 0 1px 3px rgba(0,0,0,0.12), inset 0 1px 2px rgba(0,0,0,0.24)',\n      //  'lifted': ''\n      //),\n      'level-10': (\n        'base': '0 1px 2px 1px #{transparentize($base-color, .92)}',\n        'raised': ''\n      ),\n      'level-20': (\n        'base': '0 1px 4px 1px #{transparentize($base-color, .90)}, 0 5px 10px 0 #{transparentize($base-color, .92)}',\n        'raised': '0 1px 8px 1px #{transparentize($base-color, .82)}, 0 5px 10px 1px #{transparentize($base-color, .85)}, 0 15px 30px 0 #{transparentize($base-color, .84)}'\n      ),\n      'level-30': (\n        'base': '0 8px 15px 1px #{transparentize($base-color, .90)}, 0 18px 24px 1px #{transparentize($base-color, .88)}',\n        'raised': '0 8px 15px 1px #{transparentize($base-color, .90)}, 0 24px 36px 1px #{transparentize($base-color, .82)}, 0 35px 50px 0 #{transparentize($base-color, .75)}'\n      ),\n      'level-40': (\n        'base': '0 10px 20px 1px #{transparentize($base-color, .90)}, 0 24px 36px 1px #{transparentize($base-color, .82)}',\n        'raised': '0 10px 20px 1px #{transparentize($base-color, .90)}, 0 36px 49px 1px #{transparentize($base-color, .80)}, 0 45px 65px 0 #{transparentize($base-color, .70)}'\n      ),\n      'level-50': (\n        'base': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 40px 48px 1px #{transparentize($base-color, .75)}',\n        'raised': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 50px 70px 1px #{transparentize($base-color, .80)}, 0 55px 80px 0 #{transparentize($base-color, .70)}'\n      ),\n      'level-60': (\n        'base': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 50px 60px 1px #{transparentize($base-color, .60)}',\n        'raised': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 70px 80px 1px #{transparentize($base-color, .80)}, 0 80px 120px 0 #{transparentize($base-color, .65)}'\n      ),\n      'level-70': (\n        'base': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 80px 90px 1px #{transparentize($base-color, .60)}',\n        'raised': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 110px 130px 1px #{transparentize($base-color, .75)}, 0 130px 150px 0 #{transparentize($base-color, .65)}'\n      )\n    )\n  ) !default;\n  @return $bolt-shadows;\n","line":{"start":17,"end":55}},"see":[{"description":"This outputs the correct bolt values for transform and box-shadow\n","context":{"type":"mixin","name":"bolt-shadow","code":"\n  $shadows: map-get(bolt-get-shadows-map(), 'sets');\n  @if $base-color {\n    $shadows: map-get(bolt-get-shadows-map($base-color), 'sets');\n  }\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if not(map-has-key($shadows, $key)) {\n    @error 'A value, #{$key}, was passed into @include bolt-shadow() that is not defined in $bolt-shadows';\n  } @else {\n    @if $lifted {\n      transform: translateY(-2px) #{$important};\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'raised')) #{$important};\n    } @else {\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'base')) #{$important};\n      transition: all 0.3s cubic-bezier(.25,.8,.25,1) #{$important};\n    }\n  }\n","line":{"start":19,"end":40}}}],"parameter":[{"type":"color","name":"base-color","default":"rgb(6, 10, 36)","description":"The base shadow color (with the 'transparentize' filter applied)"}],"return":{"type":"map","description":"Returns sass map of all shadow levels 'base' and 'raised' variations"},"example":[{"type":"scss","code":"$shadows: map-get(bolt-get-shadows-map(), 'sets');","description":"Get the shadow 'sets'"}],"group":["settings: shadows"],"access":"public","require":[{"type":"variable","name":"bolt-shadows"},{"type":"variable","name":"bolt-shadows"}],"file":{"path":"01-settings/settings-shadow/_settings-shadow.scss","name":"_settings-shadow.scss"},"usedBy":[{"description":"This outputs the correct bolt values for transform and box-shadow\n","context":{"type":"mixin","name":"bolt-shadow","code":"\n  $shadows: map-get(bolt-get-shadows-map(), 'sets');\n  @if $base-color {\n    $shadows: map-get(bolt-get-shadows-map($base-color), 'sets');\n  }\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if not(map-has-key($shadows, $key)) {\n    @error 'A value, #{$key}, was passed into @include bolt-shadow() that is not defined in $bolt-shadows';\n  } @else {\n    @if $lifted {\n      transform: translateY(-2px) #{$important};\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'raised')) #{$important};\n    } @else {\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'base')) #{$important};\n      transition: all 0.3s cubic-bezier(.25,.8,.25,1) #{$important};\n    }\n  }\n","line":{"start":19,"end":40}}},{"description":"This outputs the correct bolt values for transform and box-shadow\n","context":{"type":"mixin","name":"bolt-shadow","code":"\n  $shadows: map-get(bolt-get-shadows-map(), 'sets');\n  @if $base-color {\n    $shadows: map-get(bolt-get-shadows-map($base-color), 'sets');\n  }\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if not(map-has-key($shadows, $key)) {\n    @error 'A value, #{$key}, was passed into @include bolt-shadow() that is not defined in $bolt-shadows';\n  } @else {\n    @if $lifted {\n      transform: translateY(-2px) #{$important};\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'raised')) #{$important};\n    } @else {\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'base')) #{$important};\n      transition: all 0.3s cubic-bezier(.25,.8,.25,1) #{$important};\n    }\n  }\n","line":{"start":19,"end":40}}}]},{"description":"Variable containing default $bolt-shadows map - utility class and sets. Used within 'export-data()' to JSON.\n","commentRange":{"start":57,"end":57},"context":{"type":"variable","name":"bolt-shadows","value":"bolt-get-shadows-map()","scope":"private","line":{"start":58,"end":58}},"group":["settings: shadows"],"access":"public","file":{"path":"01-settings/settings-shadow/_settings-shadow.scss","name":"_settings-shadow.scss"},"usedBy":[{"description":"Helper function to return $bolt-shadows map\n","context":{"type":"function","name":"bolt-get-shadows-map","code":"\n  $bolt-shadows: (\n    'sets': (\n      //'b1': (\n      //  'base': 'inset 0 1px 3px rgba(0,0,0,0.12), inset 0 1px 2px rgba(0,0,0,0.24)',\n      //  'lifted': ''\n      //),\n      'level-10': (\n        'base': '0 1px 2px 1px #{transparentize($base-color, .92)}',\n        'raised': ''\n      ),\n      'level-20': (\n        'base': '0 1px 4px 1px #{transparentize($base-color, .90)}, 0 5px 10px 0 #{transparentize($base-color, .92)}',\n        'raised': '0 1px 8px 1px #{transparentize($base-color, .82)}, 0 5px 10px 1px #{transparentize($base-color, .85)}, 0 15px 30px 0 #{transparentize($base-color, .84)}'\n      ),\n      'level-30': (\n        'base': '0 8px 15px 1px #{transparentize($base-color, .90)}, 0 18px 24px 1px #{transparentize($base-color, .88)}',\n        'raised': '0 8px 15px 1px #{transparentize($base-color, .90)}, 0 24px 36px 1px #{transparentize($base-color, .82)}, 0 35px 50px 0 #{transparentize($base-color, .75)}'\n      ),\n      'level-40': (\n        'base': '0 10px 20px 1px #{transparentize($base-color, .90)}, 0 24px 36px 1px #{transparentize($base-color, .82)}',\n        'raised': '0 10px 20px 1px #{transparentize($base-color, .90)}, 0 36px 49px 1px #{transparentize($base-color, .80)}, 0 45px 65px 0 #{transparentize($base-color, .70)}'\n      ),\n      'level-50': (\n        'base': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 40px 48px 1px #{transparentize($base-color, .75)}',\n        'raised': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 50px 70px 1px #{transparentize($base-color, .80)}, 0 55px 80px 0 #{transparentize($base-color, .70)}'\n      ),\n      'level-60': (\n        'base': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 50px 60px 1px #{transparentize($base-color, .60)}',\n        'raised': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 70px 80px 1px #{transparentize($base-color, .80)}, 0 80px 120px 0 #{transparentize($base-color, .65)}'\n      ),\n      'level-70': (\n        'base': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 80px 90px 1px #{transparentize($base-color, .60)}',\n        'raised': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 110px 130px 1px #{transparentize($base-color, .75)}, 0 130px 150px 0 #{transparentize($base-color, .65)}'\n      )\n    )\n  ) !default;\n  @return $bolt-shadows;\n","line":{"start":17,"end":55}}},{"description":"Helper function to return $bolt-shadows map\n","context":{"type":"function","name":"bolt-get-shadows-map","code":"\n  $bolt-shadows: (\n    'sets': (\n      //'b1': (\n      //  'base': 'inset 0 1px 3px rgba(0,0,0,0.12), inset 0 1px 2px rgba(0,0,0,0.24)',\n      //  'lifted': ''\n      //),\n      'level-10': (\n        'base': '0 1px 2px 1px #{transparentize($base-color, .92)}',\n        'raised': ''\n      ),\n      'level-20': (\n        'base': '0 1px 4px 1px #{transparentize($base-color, .90)}, 0 5px 10px 0 #{transparentize($base-color, .92)}',\n        'raised': '0 1px 8px 1px #{transparentize($base-color, .82)}, 0 5px 10px 1px #{transparentize($base-color, .85)}, 0 15px 30px 0 #{transparentize($base-color, .84)}'\n      ),\n      'level-30': (\n        'base': '0 8px 15px 1px #{transparentize($base-color, .90)}, 0 18px 24px 1px #{transparentize($base-color, .88)}',\n        'raised': '0 8px 15px 1px #{transparentize($base-color, .90)}, 0 24px 36px 1px #{transparentize($base-color, .82)}, 0 35px 50px 0 #{transparentize($base-color, .75)}'\n      ),\n      'level-40': (\n        'base': '0 10px 20px 1px #{transparentize($base-color, .90)}, 0 24px 36px 1px #{transparentize($base-color, .82)}',\n        'raised': '0 10px 20px 1px #{transparentize($base-color, .90)}, 0 36px 49px 1px #{transparentize($base-color, .80)}, 0 45px 65px 0 #{transparentize($base-color, .70)}'\n      ),\n      'level-50': (\n        'base': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 40px 48px 1px #{transparentize($base-color, .75)}',\n        'raised': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 50px 70px 1px #{transparentize($base-color, .80)}, 0 55px 80px 0 #{transparentize($base-color, .70)}'\n      ),\n      'level-60': (\n        'base': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 50px 60px 1px #{transparentize($base-color, .60)}',\n        'raised': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 70px 80px 1px #{transparentize($base-color, .80)}, 0 80px 120px 0 #{transparentize($base-color, .65)}'\n      ),\n      'level-70': (\n        'base': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 80px 90px 1px #{transparentize($base-color, .60)}',\n        'raised': '0 10px 30px 1px #{transparentize($base-color, .90)}, 0 110px 130px 1px #{transparentize($base-color, .75)}, 0 130px 150px 0 #{transparentize($base-color, .65)}'\n      )\n    )\n  ) !default;\n  @return $bolt-shadows;\n","line":{"start":17,"end":55}}},{"description":"This outputs the correct bolt values for transform and box-shadow\n","context":{"type":"mixin","name":"bolt-shadow","code":"\n  $shadows: map-get(bolt-get-shadows-map(), 'sets');\n  @if $base-color {\n    $shadows: map-get(bolt-get-shadows-map($base-color), 'sets');\n  }\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if not(map-has-key($shadows, $key)) {\n    @error 'A value, #{$key}, was passed into @include bolt-shadow() that is not defined in $bolt-shadows';\n  } @else {\n    @if $lifted {\n      transform: translateY(-2px) #{$important};\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'raised')) #{$important};\n    } @else {\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'base')) #{$important};\n      transition: all 0.3s cubic-bezier(.25,.8,.25,1) #{$important};\n    }\n  }\n","line":{"start":19,"end":40}}}]},{"description":"Bolt's definition of a Japanese specific font-stack.\n","commentRange":{"start":12,"end":12},"context":{"type":"variable","name":"bolt-font-family--japanese","value":"-apple-system, BlinkMacSystemFont, 'ヒラギノ角ゴ ProN', 'Hiragino Kaku Gothic ProN', '游ゴシック', '游ゴシック体', YuGothic, 'Yu Gothic', 'メイリオ', Meiryo, 'ＭＳ ゴシック', 'MS Gothic', HiraKakuProN-W3, 'TakaoExゴシック', TakaoExGothic, 'MotoyaLCedar', 'Droid Sans Japanese', sans-serif","scope":"global","line":{"start":13,"end":13}},"group":["settings: typography"],"access":"public","file":{"path":"01-settings/00-settings-lang/_settings.lang-ja.scss","name":"_settings.lang-ja.scss"}},{"description":"Default sans-serif fallback font stack containing [1] maps to the system UI font and [2] known system UI fonts. Used within the $bolt-font-families map.\n","commentRange":{"start":16,"end":17},"context":{"type":"variable","name":"bolt-font-family--sans-fallback","value":"-apple-system, BlinkMacSystemFont, /* [1] */\n  'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', /* [2] */\n  'Helvetica Neue', sans-serif","scope":"default","line":{"start":18,"end":21}},"see":[{"description":"Bolt's definition of body, heading, and code text.\n","context":{"type":"variable","name":"bolt-font-families","value":"(\n  font-families: (\n    body: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    bodySubset: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans-subset,\n      loaded-class:  $bolt-fonts--subset-loaded-class\n    ),\n    heading: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    code: (\n      fallback-font: $bolt-font-family--mono-fallback,\n      custom-font:   $bolt-font-family--mono,\n      loaded-class:  $bolt-fonts--loaded-class\n    )\n  )\n)","scope":"default","line":{"start":57,"end":80}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-family/_settings-font-family.scss","name":"_settings-font-family.scss"}},{"description":"Default serif font stack. Used within the $bolt-font-families map.\n","commentRange":{"start":23,"end":24},"context":{"type":"variable","name":"bolt-font-family--serif","value":"'Georgia', serif","scope":"default","line":{"start":25,"end":25}},"see":[{"description":"Bolt's definition of body, heading, and code text.\n","context":{"type":"variable","name":"bolt-font-families","value":"(\n  font-families: (\n    body: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    bodySubset: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans-subset,\n      loaded-class:  $bolt-fonts--subset-loaded-class\n    ),\n    heading: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    code: (\n      fallback-font: $bolt-font-family--mono-fallback,\n      custom-font:   $bolt-font-family--mono,\n      loaded-class:  $bolt-fonts--loaded-class\n    )\n  )\n)","scope":"default","line":{"start":57,"end":80}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-family/_settings-font-family.scss","name":"_settings-font-family.scss"}},{"description":"Default monospace fallback font stack. Used within the $bolt-font-families map.\n","commentRange":{"start":27,"end":28},"context":{"type":"variable","name":"bolt-font-family--mono-fallback","value":"monospace, monospace","scope":"default","line":{"start":29,"end":29}},"see":[{"description":"Bolt's definition of body, heading, and code text.\n","context":{"type":"variable","name":"bolt-font-families","value":"(\n  font-families: (\n    body: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    bodySubset: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans-subset,\n      loaded-class:  $bolt-fonts--subset-loaded-class\n    ),\n    heading: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    code: (\n      fallback-font: $bolt-font-family--mono-fallback,\n      custom-font:   $bolt-font-family--mono,\n      loaded-class:  $bolt-fonts--loaded-class\n    )\n  )\n)","scope":"default","line":{"start":57,"end":80}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-family/_settings-font-family.scss","name":"_settings-font-family.scss"}},{"description":"Default sans-serif font stack. Used within the $bolt-font-families map.\n","commentRange":{"start":36,"end":37},"context":{"type":"variable","name":"bolt-font-family--sans","value":"'Open Sans', 'Helvetica Neue', sans-serif","scope":"default","line":{"start":38,"end":38}},"see":[{"description":"Bolt's definition of body, heading, and code text.\n","context":{"type":"variable","name":"bolt-font-families","value":"(\n  font-families: (\n    body: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    bodySubset: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans-subset,\n      loaded-class:  $bolt-fonts--subset-loaded-class\n    ),\n    heading: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    code: (\n      fallback-font: $bolt-font-family--mono-fallback,\n      custom-font:   $bolt-font-family--mono,\n      loaded-class:  $bolt-fonts--loaded-class\n    )\n  )\n)","scope":"default","line":{"start":57,"end":80}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-family/_settings-font-family.scss","name":"_settings-font-family.scss"}},{"description":"Default sans-serif subset font stack. Used within the $bolt-font-families map.\n","commentRange":{"start":40,"end":41},"context":{"type":"variable","name":"bolt-font-family--sans-subset","value":"'OpenSansSubset', 'Helvetica Neue', sans-serif","scope":"default","line":{"start":43,"end":43}},"see":[{"description":"Bolt's definition of body, heading, and code text.\n","context":{"type":"variable","name":"bolt-font-families","value":"(\n  font-families: (\n    body: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    bodySubset: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans-subset,\n      loaded-class:  $bolt-fonts--subset-loaded-class\n    ),\n    heading: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    code: (\n      fallback-font: $bolt-font-family--mono-fallback,\n      custom-font:   $bolt-font-family--mono,\n      loaded-class:  $bolt-fonts--loaded-class\n    )\n  )\n)","scope":"default","line":{"start":57,"end":80}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-family/_settings-font-family.scss","name":"_settings-font-family.scss"}},{"description":"Default monospace font stack. Used within the $bolt-font-families map.\n","commentRange":{"start":45,"end":46},"context":{"type":"variable","name":"bolt-font-family--mono","value":"monospace, monospace","scope":"default","line":{"start":47,"end":47}},"see":[{"description":"Bolt's definition of body, heading, and code text.\n","context":{"type":"variable","name":"bolt-font-families","value":"(\n  font-families: (\n    body: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    bodySubset: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans-subset,\n      loaded-class:  $bolt-fonts--subset-loaded-class\n    ),\n    heading: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    code: (\n      fallback-font: $bolt-font-family--mono-fallback,\n      custom-font:   $bolt-font-family--mono,\n      loaded-class:  $bolt-fonts--loaded-class\n    )\n  )\n)","scope":"default","line":{"start":57,"end":80}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-family/_settings-font-family.scss","name":"_settings-font-family.scss"}},{"description":"Bolt's definition of body, heading, and code text.\n","commentRange":{"start":54,"end":56},"context":{"type":"variable","name":"bolt-font-families","value":"(\n  font-families: (\n    body: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    bodySubset: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans-subset,\n      loaded-class:  $bolt-fonts--subset-loaded-class\n    ),\n    heading: (\n      fallback-font: $bolt-font-family--sans-fallback,\n      custom-font:   $bolt-font-family--sans,\n      loaded-class:  $bolt-fonts--loaded-class\n    ),\n    code: (\n      fallback-font: $bolt-font-family--mono-fallback,\n      custom-font:   $bolt-font-family--mono,\n      loaded-class:  $bolt-fonts--loaded-class\n    )\n  )\n)","scope":"default","line":{"start":57,"end":80}},"type":"Map","see":[{"description":"This returns the font-family for a specific element. Brand fonts are the default, with system fonts as the fallback.\n","context":{"type":"mixin","name":"bolt-font-family","code":"\n  $fallback-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'fallback-font');\n  $custom-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'custom-font');\n  $fonts-loaded-class: map-get-deep($bolt-font-families, 'font-families', $type, 'loaded-class');\n\n  $fontFamilyNames: map-keys(map-get($bolt-font-families, 'font-families')); // get the names of all available font families (custom and fallback)\n\n  font-family: $fallback-font-family;\n  font-family: var(--bolt-font-family-#{$type});\n\n  @if $is_root == false {\n    .#{$fonts-loaded-class} & {\n      font-family: $custom-font-family;\n      font-family: var(--bolt-font-family-#{$type});\n    }\n  }\n  @else {\n    @each $fontFamilyName in $fontFamilyNames {\n      --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'fallback-font') ;};\n    }\n\n    &.#{$fonts-loaded-class} {\n      @each $fontFamilyName in $fontFamilyNames {\n        --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'custom-font') ;};\n      }\n\n      font-family: $custom-font-family;\n    }\n  }\n","line":{"start":17,"end":46}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-family/_settings-font-family.scss","name":"_settings-font-family.scss"},"usedBy":[{"description":"This returns the font-family for a specific element. Brand fonts are the default, with system fonts as the fallback.\n","context":{"type":"mixin","name":"bolt-font-family","code":"\n  $fallback-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'fallback-font');\n  $custom-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'custom-font');\n  $fonts-loaded-class: map-get-deep($bolt-font-families, 'font-families', $type, 'loaded-class');\n\n  $fontFamilyNames: map-keys(map-get($bolt-font-families, 'font-families')); // get the names of all available font families (custom and fallback)\n\n  font-family: $fallback-font-family;\n  font-family: var(--bolt-font-family-#{$type});\n\n  @if $is_root == false {\n    .#{$fonts-loaded-class} & {\n      font-family: $custom-font-family;\n      font-family: var(--bolt-font-family-#{$type});\n    }\n  }\n  @else {\n    @each $fontFamilyName in $fontFamilyNames {\n      --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'fallback-font') ;};\n    }\n\n    &.#{$fonts-loaded-class} {\n      @each $fontFamilyName in $fontFamilyNames {\n        --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'custom-font') ;};\n      }\n\n      font-family: $custom-font-family;\n    }\n  }\n","line":{"start":17,"end":46}}},{"description":"This returns the font-family for a specific element. Brand fonts are the default, with system fonts as the fallback.\n","context":{"type":"mixin","name":"bolt-font-family","code":"\n  $fallback-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'fallback-font');\n  $custom-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'custom-font');\n  $fonts-loaded-class: map-get-deep($bolt-font-families, 'font-families', $type, 'loaded-class');\n\n  $fontFamilyNames: map-keys(map-get($bolt-font-families, 'font-families')); // get the names of all available font families (custom and fallback)\n\n  font-family: $fallback-font-family;\n  font-family: var(--bolt-font-family-#{$type});\n\n  @if $is_root == false {\n    .#{$fonts-loaded-class} & {\n      font-family: $custom-font-family;\n      font-family: var(--bolt-font-family-#{$type});\n    }\n  }\n  @else {\n    @each $fontFamilyName in $fontFamilyNames {\n      --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'fallback-font') ;};\n    }\n\n    &.#{$fonts-loaded-class} {\n      @each $fontFamilyName in $fontFamilyNames {\n        --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'custom-font') ;};\n      }\n\n      font-family: $custom-font-family;\n    }\n  }\n","line":{"start":17,"end":46}}},{"description":"This returns the font-family for a specific element. Brand fonts are the default, with system fonts as the fallback.\n","context":{"type":"mixin","name":"bolt-font-family","code":"\n  $fallback-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'fallback-font');\n  $custom-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'custom-font');\n  $fonts-loaded-class: map-get-deep($bolt-font-families, 'font-families', $type, 'loaded-class');\n\n  $fontFamilyNames: map-keys(map-get($bolt-font-families, 'font-families')); // get the names of all available font families (custom and fallback)\n\n  font-family: $fallback-font-family;\n  font-family: var(--bolt-font-family-#{$type});\n\n  @if $is_root == false {\n    .#{$fonts-loaded-class} & {\n      font-family: $custom-font-family;\n      font-family: var(--bolt-font-family-#{$type});\n    }\n  }\n  @else {\n    @each $fontFamilyName in $fontFamilyNames {\n      --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'fallback-font') ;};\n    }\n\n    &.#{$fonts-loaded-class} {\n      @each $fontFamilyName in $fontFamilyNames {\n        --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'custom-font') ;};\n      }\n\n      font-family: $custom-font-family;\n    }\n  }\n","line":{"start":17,"end":46}}},{"description":"This returns the font-family for a specific element. Brand fonts are the default, with system fonts as the fallback.\n","context":{"type":"mixin","name":"bolt-font-family","code":"\n  $fallback-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'fallback-font');\n  $custom-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'custom-font');\n  $fonts-loaded-class: map-get-deep($bolt-font-families, 'font-families', $type, 'loaded-class');\n\n  $fontFamilyNames: map-keys(map-get($bolt-font-families, 'font-families')); // get the names of all available font families (custom and fallback)\n\n  font-family: $fallback-font-family;\n  font-family: var(--bolt-font-family-#{$type});\n\n  @if $is_root == false {\n    .#{$fonts-loaded-class} & {\n      font-family: $custom-font-family;\n      font-family: var(--bolt-font-family-#{$type});\n    }\n  }\n  @else {\n    @each $fontFamilyName in $fontFamilyNames {\n      --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'fallback-font') ;};\n    }\n\n    &.#{$fonts-loaded-class} {\n      @each $fontFamilyName in $fontFamilyNames {\n        --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'custom-font') ;};\n      }\n\n      font-family: $custom-font-family;\n    }\n  }\n","line":{"start":17,"end":46}}},{"description":"This returns the font-family for a specific element. Brand fonts are the default, with system fonts as the fallback.\n","context":{"type":"mixin","name":"bolt-font-family","code":"\n  $fallback-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'fallback-font');\n  $custom-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'custom-font');\n  $fonts-loaded-class: map-get-deep($bolt-font-families, 'font-families', $type, 'loaded-class');\n\n  $fontFamilyNames: map-keys(map-get($bolt-font-families, 'font-families')); // get the names of all available font families (custom and fallback)\n\n  font-family: $fallback-font-family;\n  font-family: var(--bolt-font-family-#{$type});\n\n  @if $is_root == false {\n    .#{$fonts-loaded-class} & {\n      font-family: $custom-font-family;\n      font-family: var(--bolt-font-family-#{$type});\n    }\n  }\n  @else {\n    @each $fontFamilyName in $fontFamilyNames {\n      --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'fallback-font') ;};\n    }\n\n    &.#{$fonts-loaded-class} {\n      @each $fontFamilyName in $fontFamilyNames {\n        --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'custom-font') ;};\n      }\n\n      font-family: $custom-font-family;\n    }\n  }\n","line":{"start":17,"end":46}}},{"description":"This returns the font-family for a specific element. Brand fonts are the default, with system fonts as the fallback.\n","context":{"type":"mixin","name":"bolt-font-family","code":"\n  $fallback-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'fallback-font');\n  $custom-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'custom-font');\n  $fonts-loaded-class: map-get-deep($bolt-font-families, 'font-families', $type, 'loaded-class');\n\n  $fontFamilyNames: map-keys(map-get($bolt-font-families, 'font-families')); // get the names of all available font families (custom and fallback)\n\n  font-family: $fallback-font-family;\n  font-family: var(--bolt-font-family-#{$type});\n\n  @if $is_root == false {\n    .#{$fonts-loaded-class} & {\n      font-family: $custom-font-family;\n      font-family: var(--bolt-font-family-#{$type});\n    }\n  }\n  @else {\n    @each $fontFamilyName in $fontFamilyNames {\n      --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'fallback-font') ;};\n    }\n\n    &.#{$fonts-loaded-class} {\n      @each $fontFamilyName in $fontFamilyNames {\n        --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'custom-font') ;};\n      }\n\n      font-family: $custom-font-family;\n    }\n  }\n","line":{"start":17,"end":46}}}]},{"description":"Small breakpoint font-size\n","commentRange":{"start":9,"end":9},"context":{"type":"variable","name":"bolt-font-size--small-bp","value":"bolt-rem(bolt-breakpoint(xxsmall))","scope":"default","line":{"start":10,"end":10}},"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Medium breakpoint font-size\n","commentRange":{"start":11,"end":11},"context":{"type":"variable","name":"bolt-font-size--medium-bp","value":"bolt-rem(bolt-breakpoint(medium))","scope":"default","line":{"start":12,"end":12}},"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default XXX Large Max font-size. Used within $bolt-font-sizes map.\n","commentRange":{"start":18,"end":19},"context":{"type":"variable","name":"bolt-font-size--xxxlarge--max","value":"3.083rem","scope":"default","line":{"start":20,"end":20}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default XXX Large Min font-size. Used within $bolt-font-sizes map.\n","commentRange":{"start":21,"end":22},"context":{"type":"variable","name":"bolt-font-size--xxxlarge--min","value":"2.275rem","scope":"default","line":{"start":23,"end":23}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default XX Large font-size. Used within $bolt-font-sizes map.\n","commentRange":{"start":24,"end":25},"context":{"type":"variable","name":"bolt-font-size--xxlarge","value":"1.781rem","scope":"default","line":{"start":26,"end":26}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default X Large font-size. Used within $bolt-font-sizes map.\n","commentRange":{"start":27,"end":28},"context":{"type":"variable","name":"bolt-font-size--xlarge","value":"1.417rem","scope":"default","line":{"start":29,"end":29}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default Large font-size. Used within $bolt-font-sizes map.\n","commentRange":{"start":30,"end":31},"context":{"type":"variable","name":"bolt-font-size--large","value":"1.111rem","scope":"default","line":{"start":32,"end":32}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Medium font-size. Used within $bolt-font-sizes map.\n","commentRange":{"start":33,"end":34},"context":{"type":"variable","name":"bolt-font-size--medium","value":"1rem","scope":"default","line":{"start":35,"end":35}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Small font-size. Used within $bolt-font-sizes map.\n","commentRange":{"start":36,"end":37},"context":{"type":"variable","name":"bolt-font-size--small","value":"0.9rem","scope":"default","line":{"start":38,"end":38}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"X Small font-size. Used within $bolt-font-sizes map.\n","commentRange":{"start":39,"end":40},"context":{"type":"variable","name":"bolt-font-size--xsmall","value":"0.8rem","scope":"default","line":{"start":41,"end":41}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default XXX Large line-height. Used within $bolt-font-sizes map.\n","commentRange":{"start":43,"end":44},"context":{"type":"variable","name":"bolt-line-height--xxxlarge","value":"1.14","scope":"default","line":{"start":45,"end":45}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default XX Large line-height. Used within $bolt-font-sizes map.\n","commentRange":{"start":46,"end":47},"context":{"type":"variable","name":"bolt-line-height--xxlarge","value":"1.31","scope":"default","line":{"start":48,"end":48}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default X Large line-height. Used within $bolt-font-sizes map.\n","commentRange":{"start":49,"end":50},"context":{"type":"variable","name":"bolt-line-height--xlarge","value":"1.35","scope":"default","line":{"start":51,"end":51}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default Large line-height. Used within $bolt-font-sizes map.\n","commentRange":{"start":52,"end":53},"context":{"type":"variable","name":"bolt-line-height--large","value":"1.45","scope":"default","line":{"start":54,"end":54}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default Medium line-height. Used within $bolt-font-sizes map.\n","commentRange":{"start":55,"end":56},"context":{"type":"variable","name":"bolt-line-height--medium","value":"1.65","scope":"default","line":{"start":57,"end":57}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default Small line-height. Used within $bolt-font-sizes map.\n","commentRange":{"start":58,"end":59},"context":{"type":"variable","name":"bolt-line-height--small","value":"1.51","scope":"default","line":{"start":60,"end":60}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default X Small line-height. Used within $bolt-font-sizes map.\n","commentRange":{"start":61,"end":62},"context":{"type":"variable","name":"bolt-line-height--xsmall","value":"1.45","scope":"default","line":{"start":63,"end":63}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Default Tight line-height. Used within $bolt-font-sizes map.\n","commentRange":{"start":64,"end":65},"context":{"type":"variable","name":"bolt-line-height--tight","value":"1.111","scope":"default","line":{"start":66,"end":66}},"see":[{"description":"Bolt's definition of all options of possible text sizes.\n","context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"}},{"description":"Bolt's definition of all options of possible text sizes.\n","commentRange":{"start":71,"end":72},"context":{"type":"variable","name":"bolt-font-sizes","value":"(\n  font-sizes: (\n    xxxlarge: (\n      font-size: (\n        $bolt-font-size--small-bp: $bolt-font-size--xxxlarge--min,\n        $bolt-font-size--medium-bp: $bolt-font-size--xxxlarge--max\n      ),\n      line-height: (\n        regular: $bolt-line-height--xxxlarge,\n        tight: $bolt-line-height--tight\n      ),\n    ),\n    xxlarge: (\n      font-size: $bolt-font-size--xxlarge,\n      line-height: (\n        regular: $bolt-line-height--xxlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xlarge: (\n      font-size: $bolt-font-size--xlarge,\n      line-height: (\n        regular: $bolt-line-height--xlarge,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    large: (\n      font-size: $bolt-font-size--large,\n      line-height: (\n        regular: $bolt-line-height--large,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    medium: (\n      font-size: $bolt-font-size--medium,\n      line-height: (\n        regular: $bolt-line-height--medium,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    small: (\n      font-size: $bolt-font-size--small,\n      line-height: (\n        regular: $bolt-line-height--small,\n        tight: $bolt-line-height--tight\n      )\n    ),\n    xsmall: (\n      font-size: $bolt-font-size--xsmall,\n      line-height: (\n        regular: $bolt-line-height--xsmall,\n        tight: $bolt-line-height--tight\n      )\n    )\n  )\n)","scope":"default","line":{"start":73,"end":128}},"type":"Map","group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-size/_settings-font-size.scss","name":"_settings-font-size.scss"},"usedBy":[{"description":"This returns the font-size and relevant line-height for a specific element.\n","context":{"type":"mixin","name":"bolt-font-size","code":"\n  $font-size: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'font-size');\n\n  @if (type-of($font-size) == 'map') {\n    $length: length(map-keys($font-size));\n\n    @if ($length < 2) {\n      font-size: nth($font-size, 2);\n    } @else {\n      @include bolt-poly-fluid-sizing('font-size', $font-size);\n    }\n  } @else {\n    font-size: $font-size;\n  }\n\n  @if ($leading != '' and  $leading != null) {\n    @if (type-of($leading) == number) {\n      $leading: $leading;\n    } @elseif (type-of($leading) == string) {\n      $leading: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'line-height', $leading);\n    }\n\n    @if (type-of($leading) == 'map') {\n      $length: length(map-keys($leading));\n\n      @if ($length < 2) {\n        line-height: nth($leading, 2);\n      } @else {\n        @debug $leading;\n        @include bolt-poly-fluid-sizing('line-height', $leading);\n      }\n    } @else {\n      line-height: $leading;\n    }\n  }\n","line":{"start":18,"end":53}}},{"description":"This returns the font-size and relevant line-height for a specific element.\n","context":{"type":"mixin","name":"bolt-font-size","code":"\n  $font-size: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'font-size');\n\n  @if (type-of($font-size) == 'map') {\n    $length: length(map-keys($font-size));\n\n    @if ($length < 2) {\n      font-size: nth($font-size, 2);\n    } @else {\n      @include bolt-poly-fluid-sizing('font-size', $font-size);\n    }\n  } @else {\n    font-size: $font-size;\n  }\n\n  @if ($leading != '' and  $leading != null) {\n    @if (type-of($leading) == number) {\n      $leading: $leading;\n    } @elseif (type-of($leading) == string) {\n      $leading: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'line-height', $leading);\n    }\n\n    @if (type-of($leading) == 'map') {\n      $length: length(map-keys($leading));\n\n      @if ($length < 2) {\n        line-height: nth($leading, 2);\n      } @else {\n        @debug $leading;\n        @include bolt-poly-fluid-sizing('line-height', $leading);\n      }\n    } @else {\n      line-height: $leading;\n    }\n  }\n","line":{"start":18,"end":53}}}]},{"description":"Default regular font weight\n","commentRange":{"start":10,"end":11},"context":{"type":"variable","name":"bolt-font-weight--regular","value":"400","scope":"default","line":{"start":12,"end":12}},"see":[{"description":"Bolt's definition of all possible options of text weights.\n","context":{"type":"variable","name":"bolt-font-weights","value":"(\n  font-weights: (\n    bold:     $bolt-font-weight--bold,\n    semibold: $bolt-font-weight--semibold,\n    regular:  $bolt-font-weight--regular,\n    normal:   $bolt-font-weight--regular\n  )\n)","scope":"default","line":{"start":43,"end":50}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-weight/_settings-font-weight.scss","name":"_settings-font-weight.scss"}},{"description":"Default semibold font weight\n","commentRange":{"start":13,"end":14},"context":{"type":"variable","name":"bolt-font-weight--semibold","value":"600","scope":"default","line":{"start":15,"end":15}},"see":[{"description":"Bolt's definition of all possible options of text weights.\n","context":{"type":"variable","name":"bolt-font-weights","value":"(\n  font-weights: (\n    bold:     $bolt-font-weight--bold,\n    semibold: $bolt-font-weight--semibold,\n    regular:  $bolt-font-weight--regular,\n    normal:   $bolt-font-weight--regular\n  )\n)","scope":"default","line":{"start":43,"end":50}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-weight/_settings-font-weight.scss","name":"_settings-font-weight.scss"}},{"description":"Default bold font weight\n","commentRange":{"start":16,"end":17},"context":{"type":"variable","name":"bolt-font-weight--bold","value":"800","scope":"default","line":{"start":18,"end":18}},"see":[{"description":"Bolt's definition of all possible options of text weights.\n","context":{"type":"variable","name":"bolt-font-weights","value":"(\n  font-weights: (\n    bold:     $bolt-font-weight--bold,\n    semibold: $bolt-font-weight--semibold,\n    regular:  $bolt-font-weight--regular,\n    normal:   $bolt-font-weight--regular\n  )\n)","scope":"default","line":{"start":43,"end":50}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-weight/_settings-font-weight.scss","name":"_settings-font-weight.scss"}},{"description":"Bolt's definition of all possible options of text weights.\n","commentRange":{"start":40,"end":42},"context":{"type":"variable","name":"bolt-font-weights","value":"(\n  font-weights: (\n    bold:     $bolt-font-weight--bold,\n    semibold: $bolt-font-weight--semibold,\n    regular:  $bolt-font-weight--regular,\n    normal:   $bolt-font-weight--regular\n  )\n)","scope":"default","line":{"start":43,"end":50}},"type":"Map","see":[{"description":"This returns the font-weight for a specific element.\n","context":{"type":"mixin","name":"bolt-font-weight","code":"\n  $font-weight: map-get-deep($bolt-font-weights, 'font-weights', $weight);\n\n  font-weight: $font-weight;\n","line":{"start":20,"end":24}}}],"group":["settings: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"01-settings/settings-font-weight/_settings-font-weight.scss","name":"_settings-font-weight.scss"},"usedBy":[{"description":"This returns the font-weight for a specific element.\n","context":{"type":"mixin","name":"bolt-font-weight","code":"\n  $font-weight: map-get-deep($bolt-font-weights, 'font-weights', $weight);\n\n  font-weight: $font-weight;\n","line":{"start":20,"end":24}}}]},{"description":"Bolt border radius function\n","commentRange":{"start":10,"end":15},"context":{"type":"function","name":"bolt-border-radius","code":"\n  @if map-has-key($bolt-border-radius-values, $value) {\n    @return map-get($bolt-border-radius-values, $value)\n  } @else {\n    @error 'A value, #{$value}, was passed into bolt-border-radius() that is not defined in $bolt-border-radius-values';\n  }\n","line":{"start":16,"end":22}},"parameter":[{"type":"string","name":"value"}],"example":[{"type":"scss","code":".element {\n   border-radius: bolt-border-radius(small);\n}","description":"bolt-border-radius function"}],"group":["tools: border"],"access":"public","require":[{"type":"variable","name":"bolt-border-radius-values"},{"type":"variable","name":"bolt-border-radius-values"},{"type":"variable","name":"bolt-border-radius-values"}],"throw":["A value, #{$value}, was passed into bolt-border-radius() that is not defined in $bolt-border-radius-values"],"file":{"path":"02-tools/tools-border-radius/_tools-border-radius.scss","name":"_tools-border-radius.scss"}},{"description":"Bolt border radius mixin\n","commentRange":{"start":24,"end":29},"context":{"type":"mixin","name":"bolt-border-radius","code":"\n  $border-radius: map-get-deep($bolt-border-radius-values, $value);\n\n  @if map-has-key($bolt-border-radius-values, $value) {\n    border-radius: $border-radius;\n  } @else {\n    @error 'A value, #{$value}, was passed into @include bolt-border-radius() that is not defined in $bolt-border-radius-values';\n  }\n","line":{"start":30,"end":38}},"parameter":[{"type":"string","name":"value"}],"example":[{"type":"scss","code":".element {\n   @include bolt-border-radius(small);\n}","description":"bolt-border-radius mixin"}],"group":["tools: border"],"access":"public","require":[{"type":"variable","name":"bolt-border-radius-values"},{"type":"variable","name":"bolt-border-radius-values"},{"type":"variable","name":"bolt-border-radius-values"}],"throw":["A value, #{$value}, was passed into @include bolt-border-radius() that is not defined in $bolt-border-radius-values"],"file":{"path":"02-tools/tools-border-radius/_tools-border-radius.scss","name":"_tools-border-radius.scss"}},{"description":"This returns the breakpoint value (with px) from $bolt-breakpoints map\n","commentRange":{"start":11,"end":19},"context":{"type":"function","name":"bolt-breakpoint","code":"\n  @return map-get($bolt-breakpoints, $name);\n","line":{"start":20,"end":22}},"parameter":[{"type":"string","name":"name","description":"The name of the breakpoint (from within $bolt-breakpoints)"}],"return":{"type":"string","description":"The breakpoint value (with px)"},"example":[{"type":"scss","code":".element {\n  @media screen and (max-width: #{bolt-breakpoint(xsmall)}) {\n    font-size: 24px;\n  }\n}"}],"group":["tools: breakpoints"],"author":["Salem Ghoweri","Mike Mai"],"access":"public","require":[{"type":"variable","name":"bolt-breakpoints"}],"file":{"path":"02-tools/tools-breakpoint/_tools-breakpoint.scss","name":"_tools-breakpoint.scss"}},{"description":"This provides a wrapper mixin for performing bolt media queries with mq() which allows for the use of:\n$from (inclusive min-width boundary), $until (exclusive max-width boundary), $and (additional custom directives), $media-type (media type: screen, print, etc)\n","commentRange":{"start":29,"end":38},"context":{"type":"mixin","name":"bolt-mq","code":"\n  @include mq($args...) {\n    @content;\n  }\n","line":{"start":39,"end":43}},"link":[{"url":"https://github.com/sass-mq/sass-mq","caption":"Sass MQ on GitHub"}],"parameter":[{"name":"args...","description":"Bolt Media Query args ([breakpoint-name], $from, $until, $and, $media-type)"}],"example":[{"type":"scss","code":".element {\n  @include bolt-mq(($until: small){\n    flex-direction: column;\n  }\n}","description":"Bolt's mq() wrapper"}],"group":["tools: breakpoints"],"author":["Salem Ghoweri","Mike Mai"],"access":"public","content":"","require":[],"file":{"path":"02-tools/tools-breakpoint/_tools-breakpoint.scss","name":"_tools-breakpoint.scss"}},{"description":"Generate linear interpolated size values through multiple break points\n","commentRange":{"start":10,"end":17},"context":{"type":"mixin","name":"bolt-poly-fluid-sizing","code":"\n  // Get the number of provided breakpoints\n  $length: length(map-keys($map));\n\n  // Error if the number of breakpoints is < 2\n  @if ($length < 2) {\n    @error 'bolt-poly-fluid-sizing() $map requires at least values';\n  }\n\n  // Sort the map by viewport width (key)\n  $map: bolt-map-sort($map);\n  $keys: map-keys($map);\n\n\n  // $map: (576px: 22px, 320px: 18px, 992px: 34px, 768px: 24px);\n  // @include bolt-poly-fluid-sizing('font-size', $map);\n\n  // Minimum size\n  #{$property}: map-get($map, nth($keys, 1));\n\n  // Interpolated size through breakpoints\n  @for $i from 1 through ($length - 1) {\n    @media (min-width: nth($keys, $i)) {\n      $value1: map-get($map, nth($keys, $i));\n      $value2: map-get($map, nth($keys, ($i + 1)));\n      // If values are not equal, perform linear interpolation\n      @if ($value1 != $value2) {\n        #{$property}: bolt-linear-interpolation((nth($keys, $i): $value1, nth($keys, ($i + 1)): $value2));\n      } @else {\n        #{$property}: $value1;\n      }\n    }\n  }\n\n  // Maxmimum size\n  @media (min-width: nth($keys, $length)) {\n    #{$property}: map-get($map, nth($keys, $length));\n  }\n","line":{"start":18,"end":56}},"parameter":[{"type":"string","name":"property","description":"A string CSS property name"},{"type":"map","name":"map","description":"A Sass map of viewport unit and size value pairs"}],"require":[{"type":"function","name":"bolt-linear-interpolation","external":false},{"type":"function","name":"bolt-map-sort","external":false}],"see":[{"description":"This returns the font-size and relevant line-height for a specific element.\n","context":{"type":"mixin","name":"bolt-font-size","code":"\n  $font-size: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'font-size');\n\n  @if (type-of($font-size) == 'map') {\n    $length: length(map-keys($font-size));\n\n    @if ($length < 2) {\n      font-size: nth($font-size, 2);\n    } @else {\n      @include bolt-poly-fluid-sizing('font-size', $font-size);\n    }\n  } @else {\n    font-size: $font-size;\n  }\n\n  @if ($leading != '' and  $leading != null) {\n    @if (type-of($leading) == number) {\n      $leading: $leading;\n    } @elseif (type-of($leading) == string) {\n      $leading: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'line-height', $leading);\n    }\n\n    @if (type-of($leading) == 'map') {\n      $length: length(map-keys($leading));\n\n      @if ($length < 2) {\n        line-height: nth($leading, 2);\n      } @else {\n        @debug $leading;\n        @include bolt-poly-fluid-sizing('line-height', $leading);\n      }\n    } @else {\n      line-height: $leading;\n    }\n  }\n","line":{"start":18,"end":53}}}],"example":[{"type":"scss","code":"@include bolt-poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));"}],"group":["tools: breakpoints"],"author":["Mike Mai"],"access":"public","throw":["bolt-poly-fluid-sizing() $map requires at least values"],"file":{"path":"02-tools/tools-poly-fluid-sizing/_tools-poly-fluid-sizing.scss","name":"_tools-poly-fluid-sizing.scss"},"usedBy":[{"description":"This returns the font-size and relevant line-height for a specific element.\n","context":{"type":"mixin","name":"bolt-font-size","code":"\n  $font-size: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'font-size');\n\n  @if (type-of($font-size) == 'map') {\n    $length: length(map-keys($font-size));\n\n    @if ($length < 2) {\n      font-size: nth($font-size, 2);\n    } @else {\n      @include bolt-poly-fluid-sizing('font-size', $font-size);\n    }\n  } @else {\n    font-size: $font-size;\n  }\n\n  @if ($leading != '' and  $leading != null) {\n    @if (type-of($leading) == number) {\n      $leading: $leading;\n    } @elseif (type-of($leading) == string) {\n      $leading: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'line-height', $leading);\n    }\n\n    @if (type-of($leading) == 'map') {\n      $length: length(map-keys($leading));\n\n      @if ($length < 2) {\n        line-height: nth($leading, 2);\n      } @else {\n        @debug $leading;\n        @include bolt-poly-fluid-sizing('line-height', $leading);\n      }\n    } @else {\n      line-height: $leading;\n    }\n  }\n","line":{"start":18,"end":53}}}]},{"description":"Generate different background and border color button interaction states based on the primary color passed in\n","commentRange":{"start":10,"end":15},"context":{"type":"mixin","name":"bolt-button-color","code":"\n  color: bolt-text-contrast($color);\n  border-color: mix(black, $color, 25%);\n  background-color: $color;\n\n  // &:hover {\n  //   color: bolt-text-contrast($color);\n  //   background-color: mix(black, $color, 15%);\n  //   border-color: mix(black, $color, 40%);\n  // }\n  //\n  // &:focus,\n  // &:active {\n  //   color: bolt-text-contrast($color);\n  //   background-color: mix(black, $color, 30%);\n  //   border-color: mix(black, $color, 55%);\n  // }\n","line":{"start":16,"end":33}},"parameter":[{"type":"color","name":"color","description":"Used to generate button text, background, and border color"}],"example":[{"type":"scss","code":".element {\n  @include bolt-button-color(bolt-color(success, dark));\n}"}],"group":["tools: colors"],"author":["Salem Ghoweri"],"access":"public","require":[{"type":"function","name":"bolt-text-contrast"},{"type":"function","name":"bolt-text-contrast"},{"type":"function","name":"bolt-text-contrast"}],"file":{"path":"02-tools/tools-button-color/_tools-button-color.scss","name":"_tools-button-color.scss"}},{"description":"Helper functions for applying global color swatches stored in Sass Maps\n","commentRange":{"start":9,"end":12},"context":{"type":"function","name":"bolt-color","code":"\n  @return map-get-deep($bolt-colors, quote($color), $tone);\n","line":{"start":13,"end":15}},"parameter":[{"type":"string","name":"color","description":"Bolt color base (e.g. indigo)"},{"type":"string","name":"tone","default":"$bolt-color-default","description":"Bolt color tone (e.g. light)"}],"return":{"type":"HSL|RGB","description":"The mapped bolt color value"},"group":["tools: colors"],"access":"public","require":[{"type":"variable","name":"bolt-colors"}],"file":{"path":"02-tools/tools-color-palette/_tools-color-palette.scss","name":"_tools-color-palette.scss"},"usedBy":[{"description":"Determines the correct color (black or white) to return, given the color passed in\n","context":{"type":"function","name":"bolt-text-contrast","code":"\n  @if bolt-theme-tone($color) == \"dark\" {\n    @return bolt-color(white);\n  } @else {\n    @return bolt-color(black);\n  }\n","line":{"start":17,"end":23}}},{"description":"Determines the correct color (black or white) to return, given the color passed in\n","context":{"type":"function","name":"bolt-text-contrast","code":"\n  @if bolt-theme-tone($color) == \"dark\" {\n    @return bolt-color(white);\n  } @else {\n    @return bolt-color(black);\n  }\n","line":{"start":17,"end":23}}}]},{"description":"Mixin to return color value\n","commentRange":{"start":17,"end":24},"context":{"type":"mixin","name":"bolt-color","code":"\n  @if $important == important {\n    $important: !important;\n  }\n\n  /* stylelint-disable-next-line */\n  color: map-get-deep($bolt-colors, $color, $tone) $important;\n","line":{"start":25,"end":32}},"parameter":[{"type":"string","name":"color","description":"Bolt color base (e.g. indigo)"},{"type":"string","name":"tone","default":"$bolt-color-default","description":"Bolt color tone (e.g. light)"},{"type":"string","name":"important","default":"null","description":"If 'important', then !important will be added onto the declaration string value"}],"example":[{"type":"scss","code":".element {\n   @include bolt-color(indigo, light, important);\n}","description":"bolt-color mixin"}],"group":["tools: colors"],"access":"public","require":[{"type":"variable","name":"bolt-colors"}],"file":{"path":"02-tools/tools-color-palette/_tools-color-palette.scss","name":"_tools-color-palette.scss"}},{"description":"Places an element full browser width\n","commentRange":{"start":1,"end":7},"context":{"type":"mixin","name":"bolt-full-bleed","code":"\n  position: relative;\n  right: 50%;\n  left: 50%;\n  width: 100%; //fallback if vw not supported.\n  width: 100vw;\n  margin-top: -0.5px; //-0.5px is currently needed to patch a rendering bug in Firefox (when combined with layers being hardware accelerated)\n  margin-right: -50vw;\n  margin-bottom: -0.5px; //-0.5px is currently needed to patch a rendering bug in Firefox (when combined with layers being hardware accelerated)\n  margin-left: -50vw;\n","line":{"start":8,"end":18}},"group":["tools: layout"],"author":["Evan Lovely"],"example":[{"type":"scss","code":".element {\n  @include bolt-full-bleed();\n}"}],"access":"public","require":[],"file":{"path":"02-tools/tools-full-bleed/_tools-full-bleed.scss","name":"_tools-full-bleed.scss"}},{"description":"Provides a bolt method for controlling vertical scroll (overflow)\n","commentRange":{"start":10,"end":14},"context":{"type":"mixin","name":"bolt-vertical-scroll","code":"\n  overflow-x: hidden;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n","line":{"start":15,"end":19}},"example":[{"type":"scss","code":".element {\n   @include bolt-vertical-scroll();\n}"}],"group":["tools: layout"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"02-tools/tools-scrolling/_tools-scrolling.scss","name":"_tools-scrolling.scss"}},{"description":"Provides a bolt method for controlling horizontal scroll (overflow)\n","commentRange":{"start":21,"end":25},"context":{"type":"mixin","name":"bolt-horizontal-scroll","code":"\n  overflow-x: auto;\n  overflow-y: hidden;\n  -webkit-overflow-scrolling: touch;\n","line":{"start":26,"end":30}},"example":[{"type":"scss","code":".element {\n   @include bolt-horizontal-scroll();\n}"}],"group":["tools: layout"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"02-tools/tools-scrolling/_tools-scrolling.scss","name":"_tools-scrolling.scss"}},{"description":"Private bolt function to generate default spacing scale, based off of the base font size\n","commentRange":{"start":6,"end":14},"context":{"type":"function","name":"_bolt-create-spacing-map","code":"\n  $map: ();\n  @each $name, $value in $sizes {\n    $keyName: $name;\n    @if ($char != '' and $keyName != null) {\n      $keyName: $char + $keyName;\n    }\n    $keyValue: $value * $bolt-spacing-gutter;\n    $map: map-merge($map, ($keyName: $keyValue));\n  }\n  @return $map;\n","line":{"start":15,"end":26}},"parameter":[{"type":"list","name":"sizes","description":"Sizes to iterate over"},{"type":"string","name":"char","default":"''","description":"String to append to $keyName setting"}],"return":{"type":"map","description":"$map"},"access":"private","require":[{"type":"variable","name":"bolt-spacing-gutter","external":false}],"see":[{"description":"A map created from $bolt-spacing-values\n","context":{"type":"variable","name":"bolt-spacing-sizes","value":"_bolt-create-spacing-map($bolt-spacing-values)","scope":"private","line":{"start":29,"end":29}}}],"example":[{"type":"scss","code":"$bolt-spacing-sizes: _bolt-create-spacing-map($bolt-spacing-values);","description":"$bolt-spacing-values not shown"}],"group":["tools: layout"],"author":["Salem Ghoweri"],"file":{"path":"02-tools/tools-spacing/_tools-spacing.scss","name":"_tools-spacing.scss"}},{"description":"A map created from $bolt-spacing-values\n","commentRange":{"start":27,"end":28},"context":{"type":"variable","name":"bolt-spacing-sizes","value":"_bolt-create-spacing-map($bolt-spacing-values)","scope":"private","line":{"start":29,"end":29}},"see":[{"description":"Bolt's definition of spacing scale. Used within 'export-data()' to JSON.\n","context":{"type":"variable","name":"bolt-spacing-values","value":"(\n  '': 1,\n  'xxsmall': 0.125,\n  'xsmall': 0.25,\n  'small': 0.5,\n  'medium': 1,\n  'large': 2,\n  'xlarge': 4,\n  'xxlarge': 8,\n)","scope":"default","line":{"start":22,"end":31}}}],"group":["tools: layout"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"02-tools/tools-spacing/_tools-spacing.scss","name":"_tools-spacing.scss"},"usedBy":[{"description":"Convenience function for pulling data from $bolt-spacing-sizes\n","context":{"type":"function","name":"bolt-spacing","code":"\n  @return map-get($bolt-spacing-sizes, nth($size, 1));\n","line":{"start":41,"end":43}}}]},{"description":"Convenience function for pulling data from $bolt-spacing-sizes\n","commentRange":{"start":33,"end":40},"context":{"type":"function","name":"bolt-spacing","code":"\n  @return map-get($bolt-spacing-sizes, nth($size, 1));\n","line":{"start":41,"end":43}},"parameter":[{"type":"string","name":"size","description":"T-shirt size to pull"}],"require":[{"type":"variable","name":"bolt-spacing-sizes","external":false}],"return":{"type":"number","description":"A spacing unit"},"example":[{"type":"scss","code":".element {\n  min-height: bolt-spacing(large);\n}"}],"group":["tools: layout"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"02-tools/tools-spacing/_tools-spacing.scss","name":"_tools-spacing.scss"},"usedBy":[{"description":"Convert shirt sizes in baseline-optimized sizes\n","context":{"type":"function","name":"bolt-v-spacing","code":"\n  @if ($modifier == 'squished') {\n    $modifier: $bolt-spacing-squished;\n  } @elseif ($modifier == 'stretched') {\n    $modifier: $bolt-spacing-stretched;\n  } @else {\n    $modifier: 1;\n  }\n\n  @return (bolt-spacing($size) / bolt-strip-unit($bolt-spacing-gutter)) * $bolt-spacing-leading * $modifier;\n","line":{"start":58,"end":68}}}]},{"description":"Convert shirt sizes in baseline-optimized sizes\n","commentRange":{"start":46,"end":57},"context":{"type":"function","name":"bolt-v-spacing","code":"\n  @if ($modifier == 'squished') {\n    $modifier: $bolt-spacing-squished;\n  } @elseif ($modifier == 'stretched') {\n    $modifier: $bolt-spacing-stretched;\n  } @else {\n    $modifier: 1;\n  }\n\n  @return (bolt-spacing($size) / bolt-strip-unit($bolt-spacing-gutter)) * $bolt-spacing-leading * $modifier;\n","line":{"start":58,"end":68}},"parameter":[{"type":"string","name":"size","description":"T-shirt size"},{"type":"string","name":"modifier","default":"null","description":"Unit to multiply ending result by"}],"return":{"type":"number"},"require":[{"type":"function","name":"bolt-spacing"},{"type":"function","name":"bolt-strip-unit"},{"type":"variable","name":"bolt-spacing-squished","external":false},{"type":"variable","name":"bolt-spacing-stretched","external":false},{"type":"variable","name":"bolt-spacing-gutter","external":false},{"type":"variable","name":"bolt-spacing-leading","external":false}],"example":[{"type":"scss","code":".element {\n  width: bolt-v-spacing(xsmall);\n}"}],"group":["tools: layout"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"02-tools/tools-spacing/_tools-spacing.scss","name":"_tools-spacing.scss"},"aliased":["bolt-vertical-spacing"],"usedBy":[{"description":"An alias for @function bolt-v-spacing\n","context":{"type":"function","name":"bolt-vertical-spacing","code":"\n  @return bolt-v-spacing($size);\n","line":{"start":79,"end":81}}}]},{"description":"An alias for @function bolt-v-spacing\n","commentRange":{"start":70,"end":78},"context":{"type":"function","name":"bolt-vertical-spacing","code":"\n  @return bolt-v-spacing($size);\n","line":{"start":79,"end":81}},"alias":"bolt-v-spacing","parameter":[{"type":"string","name":"size","description":"T-shirt size"}],"return":{"type":"number"},"require":[{"type":"function","name":"bolt-v-spacing","external":false}],"example":[{"type":"scss","code":".element {\n  width: bolt-vertical-spacing(xsmall);\n}"}],"group":["tools: layout"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"02-tools/tools-spacing/_tools-spacing.scss","name":"_tools-spacing.scss"}},{"description":"Directional-property mixins are shorthands for writing properties like the following\n\n","commentRange":{"start":6,"end":30},"context":{"type":"function","name":"_bolt-collapse-directional-values","code":"\n  $output: null;\n\n  $a: nth($vals, 1);\n  $b: if(length($vals) < 2, $a, nth($vals, 2));\n  $c: if(length($vals) < 3, $a, nth($vals, 3));\n  $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));\n\n  @if $a == 0 { $a: 0; }\n  @if $b == 0 { $b: 0; }\n  @if $c == 0 { $c: 0; }\n  @if $d == 0 { $d: 0; }\n\n  @if $a == $b and $a == $c and $a == $d { $output: $a; }\n  @else if $a == $c and $b == $d { $output: $a $b; }\n  @else if $b == $d { $output: $a $b $c; }\n  @else { $output: $a $b $c $d; }\n\n  @return $output;\n","line":{"start":32,"end":51}},"ignore":[],"parameter":[{"type":"List","name":"vals","description":"List of directional values\n"}],"example":[{"type":"scss","code":".element {\n  @include border-style(dotted null);\n  @include margin(null 0 10px);\n}","description":"Usage"},{"type":"css","code":".element {\n  border-bottom-style: dotted;\n  border-top-style: dotted;\n  margin-bottom: 10px;\n  margin-left: 0;\n  margin-right: 0;\n}","description":"CSS Output"}],"require":[{"type":"function","name":"_bolt-contains-falsy","external":false}],"return":{"type":"List"},"group":["tools: layout"],"author":["Salem Ghoweri"],"access":"private","file":{"path":"02-tools/tools-spacing/libs/_tools-collapse-directionals.scss","name":"_tools-collapse-directionals.scss"},"usedBy":[{"description":"Output directional properties, for instance `margin`.\n\n","context":{"type":"mixin","name":"_bolt-directional-property","code":"\n  @if $important == important {\n    $important: !important;\n  }\n\n  // Property Names\n  $top:    $prefix + '-top'    + if($suffix, '-#{$suffix}', '');\n  $bottom: $prefix + '-bottom' + if($suffix, '-#{$suffix}', '');\n  $left:   $prefix + '-left'   + if($suffix, '-#{$suffix}', '');\n  $right:  $prefix + '-right'  + if($suffix, '-#{$suffix}', '');\n  $all:    $prefix +             if($suffix, '-#{$suffix}', '');\n\n  $values: _bolt-collapse-directional-values($values);\n\n  @if _bolt-contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1) $important; }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) {\n        #{$right}: nth($values, 1) $important;\n        #{$bottom}: nth($values, 1) $important;\n        #{$left}: nth($values, 1) $important;\n      }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2) $important; }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1) $important; }\n      @if nth($values, 2) { #{$left}: nth($values, 2) $important; }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3) $important; }\n      @if nth($values, 2) { #{$left}: nth($values, 2) $important; }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3) $important; }\n      @if nth($values, 4) { #{$left}: nth($values, 4) $important; }\n    }\n  } @else {\n    #{$all}: $values $important;\n  }\n","line":{"start":20,"end":60}}}]},{"description":"Checks if a list does not contain any values.\n\n","commentRange":{"start":6,"end":13},"context":{"type":"function","name":"_bolt-contains-falsy","code":"\n  @each $item in $list {\n    @if not $item {\n      @return true;\n    }\n  }\n\n  @return false;\n","line":{"start":15,"end":23}},"parameter":[{"type":"list","name":"list","description":"The list to check against.\n"}],"return":{"type":"boolean"},"access":"private","group":["tools: layout"],"author":["Salem Ghoweri"],"require":[],"file":{"path":"02-tools/tools-spacing/libs/_tools-contains-falsy.scss","name":"_tools-contains-falsy.scss"},"usedBy":[{"description":"Directional-property mixins are shorthands for writing properties like the following\n\n","context":{"type":"function","name":"_bolt-collapse-directional-values","code":"\n  $output: null;\n\n  $a: nth($vals, 1);\n  $b: if(length($vals) < 2, $a, nth($vals, 2));\n  $c: if(length($vals) < 3, $a, nth($vals, 3));\n  $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));\n\n  @if $a == 0 { $a: 0; }\n  @if $b == 0 { $b: 0; }\n  @if $c == 0 { $c: 0; }\n  @if $d == 0 { $d: 0; }\n\n  @if $a == $b and $a == $c and $a == $d { $output: $a; }\n  @else if $a == $c and $b == $d { $output: $a $b; }\n  @else if $b == $d { $output: $a $b $c; }\n  @else { $output: $a $b $c $d; }\n\n  @return $output;\n","line":{"start":32,"end":51}}},{"description":"Output directional properties, for instance `margin`.\n\n","context":{"type":"mixin","name":"_bolt-directional-property","code":"\n  @if $important == important {\n    $important: !important;\n  }\n\n  // Property Names\n  $top:    $prefix + '-top'    + if($suffix, '-#{$suffix}', '');\n  $bottom: $prefix + '-bottom' + if($suffix, '-#{$suffix}', '');\n  $left:   $prefix + '-left'   + if($suffix, '-#{$suffix}', '');\n  $right:  $prefix + '-right'  + if($suffix, '-#{$suffix}', '');\n  $all:    $prefix +             if($suffix, '-#{$suffix}', '');\n\n  $values: _bolt-collapse-directional-values($values);\n\n  @if _bolt-contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1) $important; }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) {\n        #{$right}: nth($values, 1) $important;\n        #{$bottom}: nth($values, 1) $important;\n        #{$left}: nth($values, 1) $important;\n      }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2) $important; }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1) $important; }\n      @if nth($values, 2) { #{$left}: nth($values, 2) $important; }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3) $important; }\n      @if nth($values, 2) { #{$left}: nth($values, 2) $important; }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3) $important; }\n      @if nth($values, 4) { #{$left}: nth($values, 4) $important; }\n    }\n  } @else {\n    #{$all}: $values $important;\n  }\n","line":{"start":20,"end":60}}}]},{"description":"Output directional properties, for instance `margin`.\n\n","commentRange":{"start":6,"end":18},"context":{"type":"mixin","name":"_bolt-directional-property","code":"\n  @if $important == important {\n    $important: !important;\n  }\n\n  // Property Names\n  $top:    $prefix + '-top'    + if($suffix, '-#{$suffix}', '');\n  $bottom: $prefix + '-bottom' + if($suffix, '-#{$suffix}', '');\n  $left:   $prefix + '-left'   + if($suffix, '-#{$suffix}', '');\n  $right:  $prefix + '-right'  + if($suffix, '-#{$suffix}', '');\n  $all:    $prefix +             if($suffix, '-#{$suffix}', '');\n\n  $values: _bolt-collapse-directional-values($values);\n\n  @if _bolt-contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1) $important; }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) {\n        #{$right}: nth($values, 1) $important;\n        #{$bottom}: nth($values, 1) $important;\n        #{$left}: nth($values, 1) $important;\n      }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2) $important; }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1) $important; }\n      @if nth($values, 2) { #{$left}: nth($values, 2) $important; }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3) $important; }\n      @if nth($values, 2) { #{$left}: nth($values, 2) $important; }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3) $important; }\n      @if nth($values, 4) { #{$left}: nth($values, 4) $important; }\n    }\n  } @else {\n    #{$all}: $values $important;\n  }\n","line":{"start":20,"end":60}},"access":"private","parameter":[{"type":"String","name":"prefix","description":"Prefix to use"},{"type":"String","name":"suffix","description":"Suffix to use"},{"type":"List","name":"values","description":"List of values\n"}],"require":[{"type":"function","name":"_bolt-collapse-directional-values","external":false},{"type":"function","name":"_bolt-contains-falsy","external":false}],"group":["tools: layout"],"author":["Salem Ghoweri"],"file":{"path":"02-tools/tools-spacing/libs/_tools-directional-property.scss","name":"_tools-directional-property.scss"}},{"description":"Bolt Z Index mixin\n","commentRange":{"start":9,"end":15},"context":{"type":"mixin","name":"bolt-z-index","code":"\n  $indexes: map-get($bolt-z-indexes, 'sets');\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if map-has-key($indexes, $key) {\n    z-index: map-get($indexes, $key) #{$important};\n  } @else {\n    @error 'A value, #{$key}, was passed into @include bolt-z-index() that is not defined in $bolt-z-indexes';\n  }\n","line":{"start":16,"end":28}},"parameter":[{"type":"string","name":"key","default":"\"content\""},{"type":"boolean","name":"utility","default":"false"}],"example":[{"type":"scss","code":".element {\n   @include bolt-z-index(tooltip);\n}","description":"bolt-z-index mixin"}],"group":["tools: layout"],"access":"public","require":[{"type":"variable","name":"bolt-z-indexes"},{"type":"variable","name":"bolt-z-indexes"}],"throw":["A value, #{$key}, was passed into @include bolt-z-index() that is not defined in $bolt-z-indexes"],"file":{"path":"02-tools/tools-z-index/_tools-z-index.scss","name":"_tools-z-index.scss"}},{"description":"Bolt Z Index function\n","commentRange":{"start":30,"end":35},"context":{"type":"function","name":"bolt-z-index","code":"\n  $indexes: map-get($bolt-z-indexes, 'sets');\n  @if map-has-key($indexes, $key) {\n    @return map-get($indexes, $key)\n  } @else {\n    @error 'A value, #{$key}, was passed into bolt-z-index() that is not defined in $bolt-z-indexes';\n  }\n","line":{"start":36,"end":43}},"parameter":[{"type":"string","name":"key"}],"example":[{"type":"scss","code":".element {\n   z-index: bolt-z-index('nav');\n}","description":"bolt-z-index function"}],"group":["tools: layout"],"access":"public","require":[{"type":"variable","name":"bolt-z-indexes"},{"type":"variable","name":"bolt-z-indexes"}],"throw":["A value, #{$key}, was passed into bolt-z-index() that is not defined in $bolt-z-indexes"],"file":{"path":"02-tools/tools-z-index/_tools-z-index.scss","name":"_tools-z-index.scss"}},{"description":"This outputs the correct bolt values for transform and box-shadow\n","commentRange":{"start":10,"end":18},"context":{"type":"mixin","name":"bolt-shadow","code":"\n  $shadows: map-get(bolt-get-shadows-map(), 'sets');\n  @if $base-color {\n    $shadows: map-get(bolt-get-shadows-map($base-color), 'sets');\n  }\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n  @if not(map-has-key($shadows, $key)) {\n    @error 'A value, #{$key}, was passed into @include bolt-shadow() that is not defined in $bolt-shadows';\n  } @else {\n    @if $lifted {\n      transform: translateY(-2px) #{$important};\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'raised')) #{$important};\n    } @else {\n      box-shadow: unquote(map-get(map-get($shadows, $key), 'base')) #{$important};\n      transition: all 0.3s cubic-bezier(.25,.8,.25,1) #{$important};\n    }\n  }\n","line":{"start":19,"end":40}},"parameter":[{"type":"string","name":"key","default":"'G'","description":"The desired shadow level (e.g. 'level-30')"},{"type":"boolean","name":"lifted","default":"false","description":"Weather or not to use the 'raised' values"},{"type":"boolean|string","name":"base-color","default":"false","description":"The base shadow color (with the 'transparentize' filter applied)"},{"type":"boolean","name":"utility","default":"false","description":"If true, adds '!important' to declaration"}],"example":[{"type":"scss","code":".element {\n   @include bolt-shadow('level-30', true);\n}"}],"group":["tools: shadows"],"access":"public","require":[{"type":"function","name":"bolt-get-shadows-map"},{"type":"function","name":"bolt-get-shadows-map"},{"type":"variable","name":"bolt-shadows"}],"throw":["A value, #{$key}, was passed into @include bolt-shadow() that is not defined in $bolt-shadows"],"file":{"path":"02-tools/tools-shadow/_tools-shadow.scss","name":"_tools-shadow.scss"}},{"description":"A private utility function for carrying out string replacement\n","commentRange":{"start":18,"end":25},"context":{"type":"function","name":"_bolt-str-replace","code":"\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + _bolt-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n\n  @return $string;\n","line":{"start":26,"end":34}},"parameter":[{"type":"string","name":"string","description":"The \"needle\""},{"type":"string","name":"search","description":"The \"haystack\""},{"type":"string","name":"replace","default":"''","description":"The string value to replace"}],"access":"private","see":[{"description":"Adds a correctly formatted @font-face declaration. Set at the top of the stylesheet.\n","context":{"type":"mixin","name":"bolt-font-face","code":"\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + _bolt-str-replace($name, ' ', '_')\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype'\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url('#{$path}.#{$extmod}') format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n","line":{"start":48,"end":73}}}],"example":[{"type":"scss","code":"$example = _bolt-str-replace($name, ' ', '_')","description":"Basic replace ($name not shown)"}],"group":["tools: typography"],"author":["Mike Mai"],"require":[],"file":{"path":"02-tools/tools-font-face/_tools-font-face.scss","name":"_tools-font-face.scss"},"usedBy":[{"description":"Adds a correctly formatted @font-face declaration. Set at the top of the stylesheet.\n","context":{"type":"mixin","name":"bolt-font-face","code":"\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + _bolt-str-replace($name, ' ', '_')\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype'\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url('#{$path}.#{$extmod}') format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n","line":{"start":48,"end":73}}}]},{"description":"Adds a correctly formatted @font-face declaration. Set at the top of the stylesheet.\n","commentRange":{"start":40,"end":47},"context":{"type":"mixin","name":"bolt-font-face","code":"\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + _bolt-str-replace($name, ' ', '_')\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype'\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url('#{$path}.#{$extmod}') format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n","line":{"start":48,"end":73}},"parameter":[{"type":"string","name":"name","description":"The 'font-family' name string"},{"type":"string","name":"path","description":"Path to the font files"},{"type":"string","name":"weight","default":"null","description":"Default font weight"},{"type":"string","name":"style","default":"null","description":"Default style"},{"type":"string","name":"exts","default":"woff2 woff","description":"Default extensions"}],"example":[{"type":"scss","code":"@include bolt-font-face('Awesome_font_name, '/path/to/font/');"}],"group":["tools: typography"],"author":["Mike Mai"],"access":"public","require":[{"type":"function","name":"_bolt-str-replace"}],"file":{"path":"02-tools/tools-font-face/_tools-font-face.scss","name":"_tools-font-face.scss"}},{"description":"This returns the font-family for a specific element. Brand fonts are the default, with system fonts as the fallback.\n","commentRange":{"start":10,"end":16},"context":{"type":"mixin","name":"bolt-font-family","code":"\n  $fallback-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'fallback-font');\n  $custom-font-family: map-get-deep($bolt-font-families, 'font-families', $type, 'custom-font');\n  $fonts-loaded-class: map-get-deep($bolt-font-families, 'font-families', $type, 'loaded-class');\n\n  $fontFamilyNames: map-keys(map-get($bolt-font-families, 'font-families')); // get the names of all available font families (custom and fallback)\n\n  font-family: $fallback-font-family;\n  font-family: var(--bolt-font-family-#{$type});\n\n  @if $is_root == false {\n    .#{$fonts-loaded-class} & {\n      font-family: $custom-font-family;\n      font-family: var(--bolt-font-family-#{$type});\n    }\n  }\n  @else {\n    @each $fontFamilyName in $fontFamilyNames {\n      --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'fallback-font') ;};\n    }\n\n    &.#{$fonts-loaded-class} {\n      @each $fontFamilyName in $fontFamilyNames {\n        --bolt-font-family-#{$fontFamilyName}: #{map-get-deep($bolt-font-families, 'font-families', $fontFamilyName, 'custom-font') ;};\n      }\n\n      font-family: $custom-font-family;\n    }\n  }\n","line":{"start":17,"end":46}},"parameter":[{"type":"string","name":"type","description":"Defines the font-family being used for each type of text: heading, body, or code."},{"type":"boolean","name":"is_root","default":"false"}],"example":[{"type":"scss","code":".element {\n   @include bolt-font-family(body);\n}","description":"bolt-font-family mixin"}],"group":["tools: typography"],"author":["Mike Mai"],"access":"public","require":[{"type":"variable","name":"bolt-font-families"},{"type":"variable","name":"bolt-font-families"},{"type":"variable","name":"bolt-font-families"},{"type":"variable","name":"bolt-font-families"},{"type":"variable","name":"bolt-font-families"},{"type":"variable","name":"bolt-font-families"}],"file":{"path":"02-tools/tools-font-family/_tools-font-family.scss","name":"_tools-font-family.scss"}},{"description":"This applies default font kerning styles for supporting browsers.\n","commentRange":{"start":11,"end":17},"context":{"type":"mixin","name":"bolt-font-kerning","code":"\n  font-feature-settings: 'kern';\n  font-kerning: normal; // Safari 7+, Firefox 24+, Chrome 33(?)\n","line":{"start":18,"end":21}},"example":[{"type":"scss","code":"*,\n*:before,\n*:after {\n @include bolt-font-kerning;\n}","description":"Setting globals"}],"group":["tools: typography"],"author":["Mike Mai"],"access":"public","require":[],"file":{"path":"02-tools/tools-font-kerning/_tools-font-kerning.scss","name":"_tools-font-kerning.scss"}},{"description":"This returns the font-size and relevant line-height for a specific element.\n","commentRange":{"start":10,"end":17},"context":{"type":"mixin","name":"bolt-font-size","code":"\n  $font-size: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'font-size');\n\n  @if (type-of($font-size) == 'map') {\n    $length: length(map-keys($font-size));\n\n    @if ($length < 2) {\n      font-size: nth($font-size, 2);\n    } @else {\n      @include bolt-poly-fluid-sizing('font-size', $font-size);\n    }\n  } @else {\n    font-size: $font-size;\n  }\n\n  @if ($leading != '' and  $leading != null) {\n    @if (type-of($leading) == number) {\n      $leading: $leading;\n    } @elseif (type-of($leading) == string) {\n      $leading: map-get-deep($bolt-font-sizes, 'font-sizes', $size, 'line-height', $leading);\n    }\n\n    @if (type-of($leading) == 'map') {\n      $length: length(map-keys($leading));\n\n      @if ($length < 2) {\n        line-height: nth($leading, 2);\n      } @else {\n        @debug $leading;\n        @include bolt-poly-fluid-sizing('line-height', $leading);\n      }\n    } @else {\n      line-height: $leading;\n    }\n  }\n","line":{"start":18,"end":53}},"parameter":[{"type":"string","name":"size","description":"Defines the size of the text: xsmall, small, base, medium, large, xlarge, or xxlarge."},{"type":"string","name":"leading","default":"regular","description":"Defines the line-height of the text: regular or tight."}],"require":[{"type":"variable","name":"bolt-font-sizes"},{"type":"variable","name":"bolt-font-sizes"},{"type":"mixin","name":"bolt-poly-fluid-sizing","external":false}],"example":[{"type":"scss","code":".element {\n   @include bolt-font-size(large);\n}"}],"group":["tools: typography"],"author":["Mike Mai"],"access":"public","file":{"path":"02-tools/tools-font-size/_tools-font-size.scss","name":"_tools-font-size.scss"}},{"description":"This returns the font-weight for a specific element.\n","commentRange":{"start":10,"end":19},"context":{"type":"mixin","name":"bolt-font-weight","code":"\n  $font-weight: map-get-deep($bolt-font-weights, 'font-weights', $weight);\n\n  font-weight: $font-weight;\n","line":{"start":20,"end":24}},"parameter":[{"type":"string","name":"weight","description":"Defines the weight of the text: bold, semi-bold, regular, or normal."}],"example":[{"type":"scss","code":".element {\n   @include bolt-font-weight(bold);\n}","description":"Mixin"},{"type":"css","code":".element {\n   font-weight: 800;\n}","description":"Output"}],"group":["tools: typography"],"author":["Mike Mai"],"access":"public","require":[{"type":"variable","name":"bolt-font-weights"}],"file":{"path":"02-tools/tools-font-weight/_tools-font-weight.scss","name":"_tools-font-weight.scss"}},{"description":"Determines the correct color (black or white) to return, given the color passed in\n","commentRange":{"start":10,"end":16},"context":{"type":"function","name":"bolt-text-contrast","code":"\n  @if bolt-theme-tone($color) == \"dark\" {\n    @return bolt-color(white);\n  } @else {\n    @return bolt-color(black);\n  }\n","line":{"start":17,"end":23}},"parameter":[{"type":"color","name":"color","description":"The color to check against"}],"return":{"type":"color","description":"Either 'black' or 'white'"},"example":[{"type":"scss","code":".element:hover {\n  color: bolt-text-contrast($primary-background-default);\n}","description":"$primary-background-default not shown"}],"group":["tools: typography"],"author":["Salem Ghoweri"],"access":"public","require":[{"type":"function","name":"bolt-color"},{"type":"function","name":"bolt-color"}],"file":{"path":"02-tools/tools-text-contrast/_tools-text-contrast.scss","name":"_tools-text-contrast.scss"},"usedBy":[{"description":"Generate different background and border color button interaction states based on the primary color passed in\n","context":{"type":"mixin","name":"bolt-button-color","code":"\n  color: bolt-text-contrast($color);\n  border-color: mix(black, $color, 25%);\n  background-color: $color;\n\n  // &:hover {\n  //   color: bolt-text-contrast($color);\n  //   background-color: mix(black, $color, 15%);\n  //   border-color: mix(black, $color, 40%);\n  // }\n  //\n  // &:focus,\n  // &:active {\n  //   color: bolt-text-contrast($color);\n  //   background-color: mix(black, $color, 30%);\n  //   border-color: mix(black, $color, 55%);\n  // }\n","line":{"start":16,"end":33}}},{"description":"Generate different background and border color button interaction states based on the primary color passed in\n","context":{"type":"mixin","name":"bolt-button-color","code":"\n  color: bolt-text-contrast($color);\n  border-color: mix(black, $color, 25%);\n  background-color: $color;\n\n  // &:hover {\n  //   color: bolt-text-contrast($color);\n  //   background-color: mix(black, $color, 15%);\n  //   border-color: mix(black, $color, 40%);\n  // }\n  //\n  // &:focus,\n  // &:active {\n  //   color: bolt-text-contrast($color);\n  //   background-color: mix(black, $color, 30%);\n  //   border-color: mix(black, $color, 55%);\n  // }\n","line":{"start":16,"end":33}}},{"description":"Generate different background and border color button interaction states based on the primary color passed in\n","context":{"type":"mixin","name":"bolt-button-color","code":"\n  color: bolt-text-contrast($color);\n  border-color: mix(black, $color, 25%);\n  background-color: $color;\n\n  // &:hover {\n  //   color: bolt-text-contrast($color);\n  //   background-color: mix(black, $color, 15%);\n  //   border-color: mix(black, $color, 40%);\n  // }\n  //\n  // &:focus,\n  // &:active {\n  //   color: bolt-text-contrast($color);\n  //   background-color: mix(black, $color, 30%);\n  //   border-color: mix(black, $color, 55%);\n  // }\n","line":{"start":16,"end":33}}}]},{"description":"Provides a bolt method for transforming text to uppercase\n","commentRange":{"start":10,"end":14},"context":{"type":"mixin","name":"bolt-uppercase","code":"\n  text-transform: uppercase;\n  letter-spacing: 0.1rem;\n","line":{"start":15,"end":18}},"example":[{"type":"scss","code":".element {\n   @include bolt-uppercase();\n}"}],"group":["tools: typography"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"02-tools/tools-uppercase/_tools-uppercase.scss","name":"_tools-uppercase.scss"}},{"description":"Just checking \"@supports (display: contents)\" isn't enough to know that a browser supports it FULLY.  So, we check\nsupport for both \"display: contents\" and \"caret-color\" (which has similar browser support) -- if a browser fails\neither check, it gets the cross-browser fallback instead.\n","commentRange":{"start":13,"end":26},"context":{"type":"mixin","name":"bolt-if-browser-supports-display-contents","code":"\n  @supports (display: contents) and (caret-color: red) {\n    @content;\n  }\n","line":{"start":27,"end":31}},"link":[{"url":"https://www.meltajon.com/dev/how-to-use-supports-display-contents-feature-query-in-safari","caption":""}],"example":[{"type":"scss","code":".element {\n  @include bolt-if-browser-supports-display-contents {\n    .element__item {\n      @media screen and (max-width: #{bolt-breakpoint(xsmall)}) {\n        display: contents;\n      }\n    }\n  }\n}"}],"group":["tools: utilities"],"author":["Remy Denton"],"access":"public","content":"","require":[],"file":{"path":"02-tools/tools-browser-support/_tools-browser-support.scss","name":"_tools-browser-support.scss"}},{"description":"Provides the ability to add a proper clearfix\n","commentRange":{"start":10,"end":15},"context":{"type":"mixin","name":"bolt-clearfix","code":"\n  @if $important == important {\n    $important: !important;\n  }\n\n  &:before,\n  &:after {\n    content: ' ' $important;\n    display: table $important;\n  }\n\n  &:after {\n    clear: both $important;\n  }\n","line":{"start":16,"end":30}},"parameter":[{"type":"boolean","name":"important","default":"null","description":"Set true to add \"!important\""}],"example":[{"type":"scss","code":".element {\n  @include bolt-clearfix();\n}"}],"group":["tools: utilities"],"author":["Salem Ghoweri"],"access":"public","require":[],"file":{"path":"02-tools/tools-clearfix/_tools-clearfix.scss","name":"_tools-clearfix.scss"}},{"description":"Define CSS that only targets Internet Explorer 11.\n","commentRange":{"start":10,"end":16},"context":{"type":"mixin","name":"bolt-ie11-only","code":"\n  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    @content;\n  }\n","line":{"start":17,"end":21}},"example":[{"type":"scss","code":".element {\n   @include bolt-ie11-only {\n     display: block;\n   }\n}"}],"group":["tools: utilities"],"author":["Mike Mai"],"access":"public","content":"","require":[],"file":{"path":"02-tools/tools-ie11-only/_tools-ie11-only.scss","name":"_tools-ie11-only.scss"}},{"description":"Calculate the definition of a line between two points\n","commentRange":{"start":10,"end":16},"context":{"type":"function","name":"bolt-linear-interpolation","code":"\n  $keys: map-keys($map);\n  @if (length($keys) != 2) {\n    @error 'linear-interpolation() $map must be exactly 2 values';\n  }\n\n  // The slope\n  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1))) / ( nth($keys, 2) - nth($keys, 1));\n\n  // The y-intercept\n  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);\n\n  // Determine if the sign should be positive or negative\n  $sign: '+';\n  @if ($b < 0) {\n    $sign: '-';\n    $b: abs($b);\n  }\n\n  @return calc(#{$m * 100}vw #{$sign} #{$b});\n","line":{"start":17,"end":37}},"parameter":[{"type":"map","name":"map","description":"A SASS map of viewport widths and size value pairs"}],"return":{"type":"Number","description":"A linear equation as a calc() function"},"see":[{"description":"Sort a SASS list\n","context":{"type":"function","name":"bolt-list-sort","code":"\n    $sortedlist: ();\n    @while length($list) > 0 {\n        $value: nth($list, 1);\n        @each $item in $list {\n          @if type-of($item) == \"number\" and type-of($value) == \"number\" {\n            @if $item < $value {\n                $value: $item;\n            }\n          } @else {\n            @warn 'Problem encountered'; // `@warn` shows Backtrace, `@error` does not\n            @error 'These values are not sortable: ' + $item + ' and ' + $value;\n          }\n        }\n        $sortedlist: append($sortedlist, $value, \"space\");\n        $list: bolt-list-remove($list, index($list, $value));\n    }\n    @return $sortedlist;\n","line":{"start":17,"end":35}}}],"link":[{"url":"https://gist.github.com/Jakobud/7414f91142e0f540f221a3e3cafdf856","caption":""}],"example":[{"type":"scss","code":"font-size: bolt-linear-interpolation((320px: 18px, 768px: 26px));"}],"group":["tools: utilities"],"author":["Mike Mai"],"access":"public","require":[],"throw":["linear-interpolation() $map must be exactly 2 values"],"file":{"path":"02-tools/tools-linear-interpolation/_tools-linear-interpolation.scss","name":"_tools-linear-interpolation.scss"},"usedBy":[{"description":"Generate linear interpolated size values through multiple break points\n","context":{"type":"mixin","name":"bolt-poly-fluid-sizing","code":"\n  // Get the number of provided breakpoints\n  $length: length(map-keys($map));\n\n  // Error if the number of breakpoints is < 2\n  @if ($length < 2) {\n    @error 'bolt-poly-fluid-sizing() $map requires at least values';\n  }\n\n  // Sort the map by viewport width (key)\n  $map: bolt-map-sort($map);\n  $keys: map-keys($map);\n\n\n  // $map: (576px: 22px, 320px: 18px, 992px: 34px, 768px: 24px);\n  // @include bolt-poly-fluid-sizing('font-size', $map);\n\n  // Minimum size\n  #{$property}: map-get($map, nth($keys, 1));\n\n  // Interpolated size through breakpoints\n  @for $i from 1 through ($length - 1) {\n    @media (min-width: nth($keys, $i)) {\n      $value1: map-get($map, nth($keys, $i));\n      $value2: map-get($map, nth($keys, ($i + 1)));\n      // If values are not equal, perform linear interpolation\n      @if ($value1 != $value2) {\n        #{$property}: bolt-linear-interpolation((nth($keys, $i): $value1, nth($keys, ($i + 1)): $value2));\n      } @else {\n        #{$property}: $value1;\n      }\n    }\n  }\n\n  // Maxmimum size\n  @media (min-width: nth($keys, $length)) {\n    #{$property}: map-get($map, nth($keys, $length));\n  }\n","line":{"start":18,"end":56}}}]},{"description":"Removed an item for a SASS list based on it's index (mimics behavior of the native map-remove function)\n","commentRange":{"start":10,"end":16},"context":{"type":"function","name":"bolt-list-remove","code":"\n  $newList: ();\n  @for $i from 1 through length($list) {\n    @if $i != $index {\n      $newList: append($newList, nth($list, $i), 'space');\n    }\n  }\n  @return $newList;\n","line":{"start":17,"end":25}},"parameter":[{"type":"list","name":"list","description":"A SASS list"},{"type":"string","name":"index","description":"The list index to remove"}],"return":{"type":"list","description":"$newList - A SASS list"},"link":[{"url":"https://gist.github.com/Jakobud/ec056b52f3673cc369dc97f2c2428424","caption":""}],"example":[{"type":"scss","code":"$list: bolt-list-remove($list, index($list, $value));"}],"group":["tools: utilities"],"author":["Mike Mai"],"access":"public","require":[],"file":{"path":"02-tools/tools-list-remove/_tools-list-remove.scss","name":"_tools-list-remove.scss"},"usedBy":[{"description":"Sort a SASS list\n","context":{"type":"function","name":"bolt-list-sort","code":"\n    $sortedlist: ();\n    @while length($list) > 0 {\n        $value: nth($list, 1);\n        @each $item in $list {\n          @if type-of($item) == \"number\" and type-of($value) == \"number\" {\n            @if $item < $value {\n                $value: $item;\n            }\n          } @else {\n            @warn 'Problem encountered'; // `@warn` shows Backtrace, `@error` does not\n            @error 'These values are not sortable: ' + $item + ' and ' + $value;\n          }\n        }\n        $sortedlist: append($sortedlist, $value, \"space\");\n        $list: bolt-list-remove($list, index($list, $value));\n    }\n    @return $sortedlist;\n","line":{"start":17,"end":35}}}]},{"description":"Sort a SASS list\n","commentRange":{"start":9,"end":16},"context":{"type":"function","name":"bolt-list-sort","code":"\n    $sortedlist: ();\n    @while length($list) > 0 {\n        $value: nth($list, 1);\n        @each $item in $list {\n          @if type-of($item) == \"number\" and type-of($value) == \"number\" {\n            @if $item < $value {\n                $value: $item;\n            }\n          } @else {\n            @warn 'Problem encountered'; // `@warn` shows Backtrace, `@error` does not\n            @error 'These values are not sortable: ' + $item + ' and ' + $value;\n          }\n        }\n        $sortedlist: append($sortedlist, $value, \"space\");\n        $list: bolt-list-remove($list, index($list, $value));\n    }\n    @return $sortedlist;\n","line":{"start":17,"end":35}},"parameter":[{"type":"list","name":"list","description":"A SASS list"}],"return":{"type":"List","description":"$sortedlist - A sorted SASS list"},"require":[{"type":"function","name":"bolt-list-remove","external":false}],"see":[{"description":"Sort map by keys\n","context":{"type":"function","name":"bolt-map-sort","code":"\n  $keys: bolt-list-sort(map-keys($map));\n  $sortedMap: ();\n  @each $key in $keys {\n    $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));\n  }\n  @return $sortedMap;\n","line":{"start":18,"end":25}}}],"link":[{"url":"https://gist.github.com/Jakobud/744b98b629abe018766f6d506a2e92ae","caption":""}],"example":[{"type":"scss","code":"$keys: bolt-list-sort(map-keys($map));","description":"Sorting ($map not shown)"}],"group":["tools: utilities"],"access":"public","throw":["These values are not sortable: "],"file":{"path":"02-tools/tools-list-sort/_tools-list-sort.scss","name":"_tools-list-sort.scss"},"usedBy":[{"description":"Sort map by keys\n","context":{"type":"function","name":"bolt-map-sort","code":"\n  $keys: bolt-list-sort(map-keys($map));\n  $sortedMap: ();\n  @each $key in $keys {\n    $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));\n  }\n  @return $sortedMap;\n","line":{"start":18,"end":25}}}]},{"description":"Sort map by keys\n","commentRange":{"start":10,"end":17},"context":{"type":"function","name":"bolt-map-sort","code":"\n  $keys: bolt-list-sort(map-keys($map));\n  $sortedMap: ();\n  @each $key in $keys {\n    $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));\n  }\n  @return $sortedMap;\n","line":{"start":18,"end":25}},"parameter":[{"type":"map","name":"map","description":"A SASS map"}],"return":{"type":"Map","description":"$sortedMap - A SASS map sorted by keys"},"link":[{"url":"https://gist.github.com/Jakobud/a0ac11e80a1de453cd86f0d3fc0a1410","caption":""}],"require":[{"type":"function","name":"bolt-list-sort","external":false}],"see":[{"description":"Generate linear interpolated size values through multiple break points\n","context":{"type":"mixin","name":"bolt-poly-fluid-sizing","code":"\n  // Get the number of provided breakpoints\n  $length: length(map-keys($map));\n\n  // Error if the number of breakpoints is < 2\n  @if ($length < 2) {\n    @error 'bolt-poly-fluid-sizing() $map requires at least values';\n  }\n\n  // Sort the map by viewport width (key)\n  $map: bolt-map-sort($map);\n  $keys: map-keys($map);\n\n\n  // $map: (576px: 22px, 320px: 18px, 992px: 34px, 768px: 24px);\n  // @include bolt-poly-fluid-sizing('font-size', $map);\n\n  // Minimum size\n  #{$property}: map-get($map, nth($keys, 1));\n\n  // Interpolated size through breakpoints\n  @for $i from 1 through ($length - 1) {\n    @media (min-width: nth($keys, $i)) {\n      $value1: map-get($map, nth($keys, $i));\n      $value2: map-get($map, nth($keys, ($i + 1)));\n      // If values are not equal, perform linear interpolation\n      @if ($value1 != $value2) {\n        #{$property}: bolt-linear-interpolation((nth($keys, $i): $value1, nth($keys, ($i + 1)): $value2));\n      } @else {\n        #{$property}: $value1;\n      }\n    }\n  }\n\n  // Maxmimum size\n  @media (min-width: nth($keys, $length)) {\n    #{$property}: map-get($map, nth($keys, $length));\n  }\n","line":{"start":18,"end":56}}}],"example":[{"type":"scss","code":"$map: bolt-map-sort($map);","description":"($map not shown)"}],"group":["tools: utilities"],"author":["Mike Mai"],"access":"public","file":{"path":"02-tools/tools-map-sort/_tools-map-sort.scss","name":"_tools-map-sort.scss"},"usedBy":[{"description":"Generate linear interpolated size values through multiple break points\n","context":{"type":"mixin","name":"bolt-poly-fluid-sizing","code":"\n  // Get the number of provided breakpoints\n  $length: length(map-keys($map));\n\n  // Error if the number of breakpoints is < 2\n  @if ($length < 2) {\n    @error 'bolt-poly-fluid-sizing() $map requires at least values';\n  }\n\n  // Sort the map by viewport width (key)\n  $map: bolt-map-sort($map);\n  $keys: map-keys($map);\n\n\n  // $map: (576px: 22px, 320px: 18px, 992px: 34px, 768px: 24px);\n  // @include bolt-poly-fluid-sizing('font-size', $map);\n\n  // Minimum size\n  #{$property}: map-get($map, nth($keys, 1));\n\n  // Interpolated size through breakpoints\n  @for $i from 1 through ($length - 1) {\n    @media (min-width: nth($keys, $i)) {\n      $value1: map-get($map, nth($keys, $i));\n      $value2: map-get($map, nth($keys, ($i + 1)));\n      // If values are not equal, perform linear interpolation\n      @if ($value1 != $value2) {\n        #{$property}: bolt-linear-interpolation((nth($keys, $i): $value1, nth($keys, ($i + 1)): $value2));\n      } @else {\n        #{$property}: $value1;\n      }\n    }\n  }\n\n  // Maxmimum size\n  @media (min-width: nth($keys, $length)) {\n    #{$property}: map-get($map, nth($keys, $length));\n  }\n","line":{"start":18,"end":56}}}]},{"description":"Provides a bolt method for controlling the user's ability to select text.\n","commentRange":{"start":10,"end":14},"context":{"type":"mixin","name":"bolt-no-select","code":"\n  user-select: none;\n","line":{"start":15,"end":17}},"example":[{"type":"scss","code":".element {\n   @include bolt-no-select;\n}"}],"group":["tools: utilities"],"author":["Salem Ghoweri"],"access":"public","file":{"path":"02-tools/tools-no-select/_tools-no-select.scss","name":"_tools-no-select.scss"}},{"description":"Bolt Opacity mixin\n","commentRange":{"start":9,"end":15},"context":{"type":"mixin","name":"bolt-opacity","code":"\n  $important: '';\n\n  @if $utility {\n    $important: '!important';\n  }\n\n  @if map-has-key($bolt-opacities, $value) {\n    opacity: map-get($bolt-opacities, $value) #{$important};\n  } @else {\n    @error 'A value, #{$value}, was passed into @include bolt-opacity() that is not defined in $bolt-opacities';\n  }\n","line":{"start":16,"end":28}},"parameter":[{"type":"string","name":"value"},{"type":"boolean","name":"important","default":"false"}],"example":[{"type":"scss","code":".element {\n   @include bolt-opacity(80);\n}","description":"bolt-opacity mixin"}],"group":["tools: utilities"],"access":"public","require":[{"type":"variable","name":"bolt-opacities"},{"type":"variable","name":"bolt-opacities"},{"type":"variable","name":"bolt-opacities"}],"throw":["A value, #{$value}, was passed into @include bolt-opacity() that is not defined in $bolt-opacities"],"file":{"path":"02-tools/tools-opacity/_tools-opacity.scss","name":"_tools-opacity.scss"}},{"description":"Bolt Opacity function\n","commentRange":{"start":30,"end":35},"context":{"type":"function","name":"bolt-opacity","code":"\n  @if map-has-key($bolt-opacities, $value) {\n    @return map-get($bolt-opacities, $value)\n  } @else {\n    @error 'A value, #{$value}, was passed into bolt-opacity() that is not defined in $bolt-opacities';\n  }\n","line":{"start":36,"end":42}},"parameter":[{"type":"string","name":"value"}],"example":[{"type":"scss","code":".element {\n   opacity: bolt-opacity(80);\n}","description":"bolt-opacity function"}],"group":["tools: utilities"],"access":"public","require":[{"type":"variable","name":"bolt-opacities"},{"type":"variable","name":"bolt-opacities"},{"type":"variable","name":"bolt-opacities"}],"throw":["A value, #{$value}, was passed into bolt-opacity() that is not defined in $bolt-opacities"],"file":{"path":"02-tools/tools-opacity/_tools-opacity.scss","name":"_tools-opacity.scss"}},{"description":"Bolt utility function to convert pixels to rems\n","commentRange":{"start":10,"end":17},"context":{"type":"function","name":"bolt-rem","code":"\n  @if (unitless($pixels)) {\n    $pixels: $pixels * 1px;\n  }\n  @if (unitless($context)) {\n    $context: $context * 1px;\n  }\n  @return $pixels / $context * 1rem;\n","line":{"start":18,"end":26}},"parameter":[{"type":"string|number","name":"pixels","description":"The pixel value to convert"},{"type":"string|number","name":"context","default":"$bolt-base-font-size--min","description":"Value to divide pixel value by (before rem multiplication)"}],"return":{"type":"string","description":"rem value (with unit)"},"example":[{"type":"scss","code":".element {\n  font-size: bolt-rem(18px);\n}"}],"group":["tools: utilities"],"author":["Mike Mai"],"access":"public","require":[],"file":{"path":"02-tools/tools-px-to-rem/_tools-px-to-rem.scss","name":"_tools-px-to-rem.scss"}},{"description":"Remove the unit of a length.\n","commentRange":{"start":12,"end":16},"context":{"type":"function","name":"bolt-strip-unit","code":"\n  @if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n","line":{"start":17,"end":22}},"parameter":[{"type":"Number","name":"number","description":"Number to remove unit from"}],"return":{"type":"Number","description":"Unitless number"},"example":[{"type":"scss","code":"$bolt-floating-label-text-scale: bolt-strip-unit($bolt-font-size--xsmall);"}],"group":["tools: utilities"],"author":["Mike Mai"],"access":"public","require":[],"file":{"path":"02-tools/tools-strip-unit/_tools-strip-unit.scss","name":"_tools-strip-unit.scss"},"usedBy":[{"description":"Convert shirt sizes in baseline-optimized sizes\n","context":{"type":"function","name":"bolt-v-spacing","code":"\n  @if ($modifier == 'squished') {\n    $modifier: $bolt-spacing-squished;\n  } @elseif ($modifier == 'stretched') {\n    $modifier: $bolt-spacing-stretched;\n  } @else {\n    $modifier: 1;\n  }\n\n  @return (bolt-spacing($size) / bolt-strip-unit($bolt-spacing-gutter)) * $bolt-spacing-leading * $modifier;\n","line":{"start":58,"end":68}}}]},{"description":"Provides a bolt method for correctly hiding an element visually (for accessibility)\n","commentRange":{"start":10,"end":15},"context":{"type":"mixin","name":"bolt-visuallyhidden","code":"\n  @if $important == important {\n    $important: !important;\n  }\n  position: absolute $important;\n  width: 1px $important;\n  height: 1px $important;\n  overflow: hidden $important;\n  margin: -1px $important;\n  padding: 0 $important;\n  border: 0 $important;\n  clip: rect(0 0 0 0) $important;\n  clip-path: inset(50%) $important;\n  white-space: nowrap $important;\n","line":{"start":16,"end":30}},"parameter":[{"type":"string","name":"important","default":"null","description":"If 'important' is set, than '!important' will be returned"}],"example":[{"type":"scss","code":".element {\n   @include bolt-visuallyhidden(important);\n}"}],"group":["tools: utilities"],"author":["Salem Ghoweri"],"access":"public","require":[],"file":{"path":"02-tools/tools-visuallyhidden/_tools-visuallyhidden.scss","name":"_tools-visuallyhidden.scss"}},{"description":"Assigns a variable to the global map\n","commentRange":{"start":17,"end":17},"context":{"type":"function","name":"bolt-css-vars-assign","code":"\n  // CHECK PARAMS\n  @if ($name==null) {\n    @error \"Variable name is expected, instead got: null\";\n  }\n  @if ($value == null) {\n    @error \"Variable value is expected, instead got: null\";\n  }\n  // assign to the global map\n  @if ($bolt-css-vars-debug-log and map-get($bolt-css-variables, $name)) {\n    @debug \"'#{$name}' variable is reassigned\";\n  }\n  @return map-merge($bolt-css-variables, ($name: $value));\n","line":{"start":18,"end":31}},"access":"public","group":["undefined"],"require":[],"throw":["Variable name is expected, instead got: null","Variable value is expected, instead got: null"],"file":{"path":"02-tools/tools-css-vars/_tools-css-vars.scss","name":"_tools-css-vars.scss"},"usedBy":[{"description":"CSS mixin to provide variables\n","context":{"type":"mixin","name":"bolt-css-vars","code":"\n  // CHECK PARAMS\n  @if ($varMap == null) {\n    @error \"Map of variables is expected, instead got: null\";\n  }\n  @if (type_of($varMap) != map) {\n    @error \"Map of variables is expected, instead got another type passed: #{type_of($varMap)}\";\n  }\n  // PROCESS\n  @if ($bolt-css-vars-debug-log or not $bolt-css-vars-use-native) { // Sass or debug\n    // merge variables and values to the global map (provides no output)\n    @each $name, $value in $varMap {\n      $bolt-css-vars: bolt-css-vars-assign($name, $value) !global; // store in global variable\n    }\n  }\n\n  @if ($bolt-css-vars-use-native) { // CSS variables\n    // Native CSS: assign CSS custom properties to the global scope\n    @if $root == true {\n      @at-root :root {\n        @each $name, $value in $varMap {\n          @if (type_of($value) == string) {\n            #{$name}: $value // to prevent quotes interpolation\n          } @else {\n            #{$name}: #{$value}\n          }\n        }\n      }\n    } @else {\n      @each $name, $value in $varMap {\n        @if (type_of($value) == string) {\n          #{$name}: $value // to prevent quotes interpolation\n        } @else {\n          #{$name}: #{$value}\n        }\n      }\n    }\n  }\n","line":{"start":127,"end":165}}}]},{"description":"Emulates var() CSS native function behavior\n","commentRange":{"start":33,"end":38},"context":{"type":"function","name":"bolt-var","code":"\n  $var: '';\n  $opacity: 1;\n\n  @if (length($args) >= 1) {\n    $var: nth($args, 1);\n  }\n\n  @if type-of($var) == list {\n    $opacity: nth($var, 2);\n  }\n\n  $varName: str-slice(nth($var, 1), 8, str-length(nth($var, 1)));\n\n  @if str-slice($varName, 0, 5) == 'theme' {\n    $varNameSansTheme: str-slice($varName, 7, str-length($varName));\n\n    @if bolt-is-theme-var($varNameSansTheme) and bolt-is-shimmable-theme-prop($varNameSansTheme) {\n      @return bolt-theme($varNameSansTheme, $opacity);\n    } @else {\n      // @warn \"The `#{$varNameSansTheme}` theme-specific CSS variable used isn't a registered theme variable in Bolt. Be carefull as these will not work as expected in IE 11...\";\n    }\n  } @else {\n    // @warn $varName + ' CSS variable was used but not registered as a Globally variable in Bolt. Be carefull as these will not work as expected in IE 11...';\n  }\n  @return var($args);\n","line":{"start":40,"end":66}},"parameter":[{"type":"String","name":"args","description":"Variable name"},{"type":"string","name":"args2","description":"Optional default value if variable is not assigned yet"}],"example":[{"type":"scss","code":"color: var(--main-color);\nbackground: var(--main-bg, green);","description":"basic usage"}],"access":"public","group":["undefined"],"require":[],"file":{"path":"02-tools/tools-css-vars/_tools-css-vars.scss","name":"_tools-css-vars.scss"}},{"description":"CSS mixin to provide variables\n","commentRange":{"start":118,"end":126},"context":{"type":"mixin","name":"bolt-css-vars","code":"\n  // CHECK PARAMS\n  @if ($varMap == null) {\n    @error \"Map of variables is expected, instead got: null\";\n  }\n  @if (type_of($varMap) != map) {\n    @error \"Map of variables is expected, instead got another type passed: #{type_of($varMap)}\";\n  }\n  // PROCESS\n  @if ($bolt-css-vars-debug-log or not $bolt-css-vars-use-native) { // Sass or debug\n    // merge variables and values to the global map (provides no output)\n    @each $name, $value in $varMap {\n      $bolt-css-vars: bolt-css-vars-assign($name, $value) !global; // store in global variable\n    }\n  }\n\n  @if ($bolt-css-vars-use-native) { // CSS variables\n    // Native CSS: assign CSS custom properties to the global scope\n    @if $root == true {\n      @at-root :root {\n        @each $name, $value in $varMap {\n          @if (type_of($value) == string) {\n            #{$name}: $value // to prevent quotes interpolation\n          } @else {\n            #{$name}: #{$value}\n          }\n        }\n      }\n    } @else {\n      @each $name, $value in $varMap {\n        @if (type_of($value) == string) {\n          #{$name}: $value // to prevent quotes interpolation\n        } @else {\n          #{$name}: #{$value}\n        }\n      }\n    }\n  }\n","line":{"start":127,"end":165}},"parameter":[{"type":"Map","name":"varMap","default":"null","description":"Check for our params"},{"type":"Boolean","name":"root","default":"false","description":"Output as root?"}],"example":[{"type":"scss","code":" @include bolt-css-vars((\n     --color: rebeccapurple,\n     --height: 68px,\n     --margin-top: calc(2vh + 20px)\n));","description":"\"basic usage\""}],"access":"public","group":["undefined"],"require":[{"type":"function","name":"bolt-css-vars-assign"}],"throw":["Map of variables is expected, instead got: null","Map of variables is expected, instead got another type passed: #{type_of($varMap)}"],"file":{"path":"02-tools/tools-css-vars/_tools-css-vars.scss","name":"_tools-css-vars.scss"}},{"description":"Delay the encoding of ta literal to JSON to a type-specific method\n","commentRange":{"start":3,"end":14},"context":{"type":"function","name":"bolt-json-encode","code":"\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call(get-function('_json-encode--#{$type}'), $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n","line":{"start":15,"end":23}},"access":"public","parameter":[{"type":"*","name":"value","description":"value to be stringified"}],"throw":["Unknown type for #{$value} (#{$type})."],"return":{"type":"String","description":"JSON encoded string"},"require":[{"type":"function","name":"_json-encode--string","external":false},{"type":"function","name":"_json-encode--number","external":false},{"type":"function","name":"_json-encode--list","external":false},{"type":"function","name":"_json-encode--map","external":false},{"type":"function","name":"_json-encode--null","external":false},{"type":"function","name":"_json-encode--color","external":false},{"type":"function","name":"_json-encode--bool","external":false}],"group":["undefined"],"file":{"path":"02-tools/tools-sass-json-export/encode/api/_json.scss","name":"_json.scss"},"usedBy":[{"description":"JSON.stringify a value and pass it as a font-family of head element\n","context":{"type":"mixin","name":"bolt-json-encode","code":"\n  $flag: if(index('all' 'regular' 'media' 'comment', $flag), $flag, 'all');\n  $json: bolt-json-encode($value);\n\n  // Persistent comment\n  @if $flag == 'comment' or $flag == 'all' {\n    /*! json-encode: #{$json} */\n  }\n  // Regular property value pair\n  @if $flag == 'regular' or $flag == 'all' {\n    // All browsers except IE8-\n    body {\n      &::before {\n        // This element must be in the render tree to get it via getComputedStyle(document.body, ':before');\n        content: bolt-json-encode($value);\n        display: block;\n        width: 0;\n        height: 0;\n        overflow: hidden;\n      }\n    }\n\n    // All browsers except Opera (Presto based)\n    head {\n      font-family: bolt-json-encode($value);\n    }\n  }\n\n  // Falsy media query\n  @if $flag == 'media' or $flag == 'all' {\n    @media -json-encode {\n      json {\n        json: $json;\n      }\n    }\n  }\n","line":{"start":8,"end":44}}},{"description":"Encode a list to JSON\n","context":{"type":"function","name":"_json-encode--list","code":"\n  $str: '';\n\n  @each $item in $list {\n    $str: $str + ', ' + bolt-json-encode($item);\n  }\n\n  @return '[' + str-slice($str, 3) + ']';\n","line":{"start":8,"end":16}}},{"description":"Encode a map to JSON\n","context":{"type":"function","name":"_json-encode--map","code":"\n  $str: '';\n\n  @each $key, $value in $map {\n    $str: $str + ', ' + _proof-quote($key) + ': ' + bolt-json-encode($value);\n  }\n\n  @return '{' + str-slice($str, 3) + '}';\n","line":{"start":9,"end":17}}}]},{"description":"Proof quote a value\n","commentRange":{"start":3,"end":6},"context":{"type":"function","name":"_proof-quote","code":"\n  // $value: to-string($value);\n  @return '\"#{$value}\"';\n","line":{"start":8,"end":11}},"access":"private","parameter":[{"type":"*","name":"value","description":"value to be quoted"}],"return":{"type":"String","description":"quoted value"},"group":["undefined"],"require":[],"file":{"path":"02-tools/tools-sass-json-export/encode/helpers/_quote.scss","name":"_quote.scss"},"usedBy":[{"description":"Encode a color to JSON\n","context":{"type":"function","name":"_json-encode--color","code":"\n  @return _proof-quote($color);\n","line":{"start":8,"end":10}}},{"description":"Encode a map to JSON\n","context":{"type":"function","name":"_json-encode--map","code":"\n  $str: '';\n\n  @each $key, $value in $map {\n    $str: $str + ', ' + _proof-quote($key) + ': ' + bolt-json-encode($value);\n  }\n\n  @return '{' + str-slice($str, 3) + '}';\n","line":{"start":9,"end":17}}},{"description":"Encode a number to JSON\n","context":{"type":"function","name":"_json-encode--number","code":"\n  @return if(unitless($number), $number, _proof-quote($number));\n","line":{"start":8,"end":10}}},{"description":"Encode a string to JSON\n","context":{"type":"function","name":"_json-encode--string","code":"\n  @return _proof-quote($string);\n","line":{"start":8,"end":10}}}]},{"description":"JSON.stringify a value and pass it as a font-family of head element\n","commentRange":{"start":3,"end":7},"context":{"type":"mixin","name":"bolt-json-encode","code":"\n  $flag: if(index('all' 'regular' 'media' 'comment', $flag), $flag, 'all');\n  $json: bolt-json-encode($value);\n\n  // Persistent comment\n  @if $flag == 'comment' or $flag == 'all' {\n    /*! json-encode: #{$json} */\n  }\n  // Regular property value pair\n  @if $flag == 'regular' or $flag == 'all' {\n    // All browsers except IE8-\n    body {\n      &::before {\n        // This element must be in the render tree to get it via getComputedStyle(document.body, ':before');\n        content: bolt-json-encode($value);\n        display: block;\n        width: 0;\n        height: 0;\n        overflow: hidden;\n      }\n    }\n\n    // All browsers except Opera (Presto based)\n    head {\n      font-family: bolt-json-encode($value);\n    }\n  }\n\n  // Falsy media query\n  @if $flag == 'media' or $flag == 'all' {\n    @media -json-encode {\n      json {\n        json: $json;\n      }\n    }\n  }\n","line":{"start":8,"end":44}},"access":"public","parameter":[{"type":"*","name":"value","description":"value to be stringified"},{"type":"String","name":"flag","description":"(all) - output driver"}],"require":[{"type":"function","name":"bolt-json-encode","external":false}],"group":["undefined"],"file":{"path":"02-tools/tools-sass-json-export/encode/mixins/_json.scss","name":"_json.scss"}},{"description":"Encode a bool to JSON\n","commentRange":{"start":3,"end":6},"context":{"type":"function","name":"_json-encode--bool","code":"\n  @return $boolean;\n","line":{"start":7,"end":9}},"access":"private","parameter":[{"type":"Bool","name":"bool","description":"bool to be encoded"}],"return":{"type":"Bool","description":"encoded bool"},"group":["undefined"],"require":[],"file":{"path":"02-tools/tools-sass-json-export/encode/types/_bool.scss","name":"_bool.scss"},"usedBy":[{"description":"Delay the encoding of ta literal to JSON to a type-specific method\n","context":{"type":"function","name":"bolt-json-encode","code":"\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call(get-function('_json-encode--#{$type}'), $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n","line":{"start":15,"end":23}}}]},{"description":"Encode a color to JSON\n","commentRange":{"start":3,"end":7},"context":{"type":"function","name":"_json-encode--color","code":"\n  @return _proof-quote($color);\n","line":{"start":8,"end":10}},"access":"private","parameter":[{"type":"Color","name":"color","description":"color to be encoded"}],"return":{"type":"String","description":"encoded color"},"require":[{"type":"function","name":"_proof-quote","external":false}],"group":["undefined"],"file":{"path":"02-tools/tools-sass-json-export/encode/types/_color.scss","name":"_color.scss"},"usedBy":[{"description":"Delay the encoding of ta literal to JSON to a type-specific method\n","context":{"type":"function","name":"bolt-json-encode","code":"\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call(get-function('_json-encode--#{$type}'), $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n","line":{"start":15,"end":23}}}]},{"description":"Encode a list to JSON\n","commentRange":{"start":3,"end":7},"context":{"type":"function","name":"_json-encode--list","code":"\n  $str: '';\n\n  @each $item in $list {\n    $str: $str + ', ' + bolt-json-encode($item);\n  }\n\n  @return '[' + str-slice($str, 3) + ']';\n","line":{"start":8,"end":16}},"access":"private","parameter":[{"type":"List","name":"list","description":"list to be encoded"}],"return":{"type":"String","description":"encoded list"},"require":[{"type":"function","name":"bolt-json-encode","external":false}],"group":["undefined"],"file":{"path":"02-tools/tools-sass-json-export/encode/types/_list.scss","name":"_list.scss"},"usedBy":[{"description":"Delay the encoding of ta literal to JSON to a type-specific method\n","context":{"type":"function","name":"bolt-json-encode","code":"\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call(get-function('_json-encode--#{$type}'), $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n","line":{"start":15,"end":23}}}]},{"description":"Encode a map to JSON\n","commentRange":{"start":3,"end":8},"context":{"type":"function","name":"_json-encode--map","code":"\n  $str: '';\n\n  @each $key, $value in $map {\n    $str: $str + ', ' + _proof-quote($key) + ': ' + bolt-json-encode($value);\n  }\n\n  @return '{' + str-slice($str, 3) + '}';\n","line":{"start":9,"end":17}},"access":"private","parameter":[{"type":"Map","name":"map","description":"map to be encoded"}],"return":{"type":"String","description":"encoded map"},"require":[{"type":"function","name":"_proof-quote","external":false},{"type":"function","name":"bolt-json-encode","external":false}],"group":["undefined"],"file":{"path":"02-tools/tools-sass-json-export/encode/types/_map.scss","name":"_map.scss"},"usedBy":[{"description":"Delay the encoding of ta literal to JSON to a type-specific method\n","context":{"type":"function","name":"bolt-json-encode","code":"\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call(get-function('_json-encode--#{$type}'), $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n","line":{"start":15,"end":23}}}]},{"description":"Encode `null` to JSON\n","commentRange":{"start":3,"end":6},"context":{"type":"function","name":"_json-encode--null","code":"\n  @return 'null';\n","line":{"start":7,"end":9}},"access":"private","parameter":[{"type":"Null","name":"null","description":"`null`"}],"return":{"type":"String"},"group":["undefined"],"file":{"path":"02-tools/tools-sass-json-export/encode/types/_null.scss","name":"_null.scss"},"usedBy":[{"description":"Delay the encoding of ta literal to JSON to a type-specific method\n","context":{"type":"function","name":"bolt-json-encode","code":"\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call(get-function('_json-encode--#{$type}'), $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n","line":{"start":15,"end":23}}}]},{"description":"Encode a number to JSON\n","commentRange":{"start":3,"end":7},"context":{"type":"function","name":"_json-encode--number","code":"\n  @return if(unitless($number), $number, _proof-quote($number));\n","line":{"start":8,"end":10}},"access":"private","parameter":[{"type":"Number","name":"number","description":"number to be encoded"}],"return":{"type":"String","description":"encoded number"},"require":[{"type":"function","name":"_proof-quote","external":false}],"group":["undefined"],"file":{"path":"02-tools/tools-sass-json-export/encode/types/_number.scss","name":"_number.scss"},"usedBy":[{"description":"Delay the encoding of ta literal to JSON to a type-specific method\n","context":{"type":"function","name":"bolt-json-encode","code":"\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call(get-function('_json-encode--#{$type}'), $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n","line":{"start":15,"end":23}}}]},{"description":"Encode a string to JSON\n","commentRange":{"start":3,"end":7},"context":{"type":"function","name":"_json-encode--string","code":"\n  @return _proof-quote($string);\n","line":{"start":8,"end":10}},"access":"private","parameter":[{"type":"String","name":"string","description":"string to be encoded"}],"return":{"type":"String","description":"encoded string"},"require":[{"type":"function","name":"_proof-quote","external":false}],"group":["undefined"],"file":{"path":"02-tools/tools-sass-json-export/encode/types/_string.scss","name":"_string.scss"},"usedBy":[{"description":"Delay the encoding of ta literal to JSON to a type-specific method\n","context":{"type":"function","name":"bolt-json-encode","code":"\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call(get-function('_json-encode--#{$type}'), $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n","line":{"start":15,"end":23}}}]}]